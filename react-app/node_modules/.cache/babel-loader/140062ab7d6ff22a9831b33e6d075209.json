{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/EditQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Question from \"./Question\";\nimport { nanoid } from 'nanoid';\nimport { sortByDate } from \"../utils/HelperFunctions\";\nimport { createQuestionAPIMethod, deleteQuestionByIdAPIMethod, getQuestionsAPIMethod, updateQuestionAPIMethod } from \"../api/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction EditQuestions(props) {\n  _s();\n\n  const [questions, setQuestions] = useState(props.questions);\n  useEffect(() => {\n    setQuestions(props.questions);\n  }, [props.questions]);\n\n  const handleSubmit = () => {\n    getQuestionsAPIMethod().then(dbQuestions => {\n      console.log(questions);\n\n      for (let i = 0; i < questions.length; i++) {\n        if (questions[i].status === 'ADDED') {\n          console.log(\"added\");\n          questions[i].status = '';\n          createQuestionAPIMethod(questions[i]);\n        }\n\n        for (let j = 0; j < dbQuestions.length; j++) {\n          if (dbQuestions[j].nanoid === questions[i].nanoid) {\n            if (questions[i].status === 'DELETED' && dbQuestions[j]._id !== undefined) {\n              console.log(\"deleted\");\n              deleteQuestionByIdAPIMethod(dbQuestions[j]._id);\n            } else {\n              console.log(\"updated\");\n              let newQuestion = {\n                _id: dbQuestions[j]._id,\n                type: questions[i].type,\n                header: questions[i].header,\n                choices: questions[i].choices,\n                mdate: questions[i].mdate,\n                nanoid: questions[i].nanoid,\n                creator: questions[i].creator\n              };\n              updateQuestionAPIMethod(newQuestion);\n            }\n          }\n        }\n      }\n    });\n    let newQuestions = questions.filter(question => question.status !== 'DELETED');\n    props.setQuestions(sortByDate(newQuestions));\n  };\n\n  const addQuestion = () => {\n    let id = nanoid();\n    let newQuestion = {\n      type: 'Text',\n      header: '',\n      choices: [],\n      mdate: new Date(),\n      nanoid: id,\n      status: 'ADDED'\n    };\n    let newQuestions = [...questions];\n    newQuestions.push(newQuestion);\n    setQuestions(newQuestions); //console.log(\"added: \" + id);\n  };\n\n  const deleteQuestion = nanoid => {\n    let newQuestions = [...questions];\n\n    for (let i = 0; i < newQuestions.length; i++) {\n      if (newQuestions[i].nanoid === nanoid) {\n        newQuestions[i].status = 'DELETED'; //console.log(\"deleted: \" + nanoid);\n      }\n    }\n\n    setQuestions(newQuestions);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"EditQuestions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"80%\",\n        margin: \"auto\",\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addQuestion,\n        style: {\n          background: \"transparent\",\n          border: \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-icons\",\n          children: \"add_circle_outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), questions ? questions.filter(question => question.status !== 'DELETED').map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"QuestionList\",\n      style: {\n        listStyle: \"none\",\n        padding: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Question, {\n        editMode: true,\n        type: question.type,\n        header: question.header,\n        choices: question.choices,\n        mdate: question.mdate,\n        nanoid: question.nanoid,\n        questions: questions,\n        setQuestions: setQuestions,\n        responses: props.responses.filter(res => res.question === question._id),\n        deleteQuestion: deleteQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SubmitButton\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EditQuestions, \"KrLfVpyp4ZGEeIBAd+yctl72KJ4=\");\n\n_c = EditQuestions;\nexport default EditQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditQuestions\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/EditQuestions.js"],"names":["React","useState","useEffect","Question","nanoid","sortByDate","createQuestionAPIMethod","deleteQuestionByIdAPIMethod","getQuestionsAPIMethod","updateQuestionAPIMethod","EditQuestions","props","questions","setQuestions","handleSubmit","then","dbQuestions","console","log","i","length","status","j","_id","undefined","newQuestion","type","header","choices","mdate","creator","newQuestions","filter","question","addQuestion","id","Date","push","deleteQuestion","width","margin","display","justifyContent","background","border","map","listStyle","padding","responses","res"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Question from \"./Question\";\nimport {nanoid} from 'nanoid'\nimport {sortByDate} from \"../utils/HelperFunctions\";\nimport {\n    createQuestionAPIMethod,\n    deleteQuestionByIdAPIMethod,\n    getQuestionsAPIMethod,\n    updateQuestionAPIMethod\n} from \"../api/client\";\n\nfunction EditQuestions(props){\n    const [questions, setQuestions] = useState(props.questions);\n\n    useEffect(() => {\n        setQuestions(props.questions);\n    }, [props.questions]);\n\n    const handleSubmit = () => {\n        getQuestionsAPIMethod().then((dbQuestions) => {\n            console.log(questions);\n            for (let i = 0; i < questions.length; i++) {\n                if (questions[i].status === 'ADDED') {\n                    console.log(\"added\");\n                    questions[i].status = '';\n                    createQuestionAPIMethod(questions[i]);\n                }\n                for (let j = 0; j < dbQuestions.length; j++) {\n                    if (dbQuestions[j].nanoid === questions[i].nanoid) {\n                        if (questions[i].status === 'DELETED' && dbQuestions[j]._id !== undefined) {\n                            console.log(\"deleted\");\n                            deleteQuestionByIdAPIMethod(dbQuestions[j]._id);\n                        }\n                        else {\n                            console.log(\"updated\");\n                            let newQuestion = {\n                                _id: dbQuestions[j]._id,\n                                type: questions[i].type,\n                                header: questions[i].header,\n                                choices: questions[i].choices,\n                                mdate: questions[i].mdate,\n                                nanoid: questions[i].nanoid,\n                                creator: questions[i].creator\n                            }\n                            updateQuestionAPIMethod(newQuestion);\n                        }\n                    }\n                }\n            }\n        });\n        let newQuestions = questions.filter((question) => question.status !== 'DELETED');\n        props.setQuestions(sortByDate(newQuestions));\n    }\n\n    const addQuestion = () => {\n        let id = nanoid();\n        let newQuestion = {\n            type: 'Text',\n            header: '',\n            choices: [],\n            mdate: new Date(),\n            nanoid: id,\n            status: 'ADDED'\n        }\n        let newQuestions = [...questions];\n        newQuestions.push(newQuestion);\n        setQuestions(newQuestions);\n        //console.log(\"added: \" + id);\n    }\n\n    const deleteQuestion = (nanoid) => {\n        let newQuestions = [...questions];\n        for (let i = 0; i < newQuestions.length; i++) {\n            if (newQuestions[i].nanoid === nanoid) {\n                newQuestions[i].status = 'DELETED';\n                //console.log(\"deleted: \" + nanoid);\n            }\n        }\n        setQuestions(newQuestions);\n    }\n\n    return (\n        <div className=\"EditQuestions\">\n            <div style={{width: \"80%\",margin: \"auto\",display: \"flex\", justifyContent: \"space-between\"}}>\n                <h3>Edit Questions</h3>\n                <button onClick={addQuestion} style={{background: \"transparent\", border: \"none\"}}>\n                    <span  className=\"material-icons\">add_circle_outline</span>\n                </button>\n            </div>\n            {\n                questions ?\n                    questions.filter((question) => question.status !== 'DELETED').map((question) =>\n                        <li className=\"QuestionList\" style={{listStyle: \"none\", padding: \"5px\"}}>\n                            <Question\n                                editMode={true}\n                                type={question.type}\n                                header={question.header}\n                                choices={question.choices}\n                                mdate={question.mdate}\n                                nanoid={question.nanoid}\n                                questions={questions}\n                                setQuestions={setQuestions}\n                                responses={props.responses.filter((res) => res.question === question._id)}\n                                deleteQuestion={deleteQuestion}\n                            />\n                        </li>\n                    )\n                    : <></>\n            }\n            <div className=\"SubmitButton\">\n                <button onClick={handleSubmit}>Save</button>\n            </div>\n        </div>\n    );\n}\nexport default EditQuestions"]},"metadata":{},"sourceType":"module"}