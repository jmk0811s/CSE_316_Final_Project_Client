{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Profile from \"./Profile\";\nimport EditQuestions from \"./EditQuestions\";\nimport Daylog from \"./Daylog\";\nimport ViewData from \"./ViewData\"; //import API methods\n\nimport { getCurrentUserAPIMethod, getDaylogsAPIMethod } from \"../api/client.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Main() {\n  _s();\n\n  const [curUser, setCurUser] = useState({});\n  const [defaultImg, setDefaultImg] = useState(true);\n  const [imgURL, setImgURL] = useState('');\n  const [daylogs, setDaylogs] = useState([]);\n  const [currentPage, setCurrentPage] = useState('Daylog'); //get daylogs from the server\n\n  useEffect(() => {\n    getCurrentUserAPIMethod().then(user => {\n      if (user !== null && Object.keys(user).length !== 0) {\n        if (user.hasOwnProperty('profile_url') && user.profile_url !== '') {\n          setDefaultImg(true);\n          setImgURL('');\n        } else {\n          setDefaultImg(false);\n          setImgURL(user.profile_url);\n        }\n\n        setCurUser(user);\n      }\n    });\n    getDaylogsAPIMethod().then(daylogs => {\n      setDaylogs(sortByDate(daylogs));\n      console.log(daylogs);\n    });\n  }, []);\n\n  const sortByDate = list => {\n    return list.sort((a, b) => b.date - a.date);\n  };\n\n  const testQSet = [{\n    qText: \"2019 q1: bool\",\n    qType: \"boolean\",\n    qDate: new Date('2019-06-28')\n  }, {\n    qText: \"2019 q2: bool\",\n    qType: \"boolean\",\n    qDate: new Date('2019-06-28')\n  }, {\n    qText: \"2019 q3: Text\",\n    qType: \"text\",\n    qDate: new Date('2019-06-28')\n  }, {\n    qText: \"2019 q4: Number\",\n    qType: \"number\",\n    qDate: new Date('2019-06-28')\n  }, {\n    qText: \"2019 q5: multiple\",\n    qType: \"multiple\",\n    qDate: new Date('2019-06-28'),\n    qChoices: [\"Ok day\", \"Great Day\", \"Bad day\"]\n  }];\n  const testLogDaySet = [{\n    qDate: new Date('2019-06-28'),\n    qSet: testQSet\n  }, {\n    qDate: new Date('2020-07-28'),\n    qSet: [{\n      qText: \"2020 q1: bool\",\n      qType: \"boolean\",\n      qDate: new Date('2020-07-28')\n    }, {\n      qText: \"2020 q2: bool\",\n      qType: \"boolean\",\n      qDate: new Date('2020-07-28')\n    }, {\n      qText: \"2020 q3: Text\",\n      qType: \"text\",\n      qDate: new Date('2020-07-28')\n    }]\n  }, {\n    qDate: new Date(),\n    qSet: [{\n      qText: \"2021 q1: bool\",\n      qType: \"boolean\",\n      qDate: new Date()\n    }, {\n      qText: \"2021 q2: bool\",\n      qType: \"boolean\",\n      qDate: new Date()\n    }, {\n      qText: \"2021 q3: Text\",\n      qType: \"text\",\n      qDate: new Date()\n    }]\n  }]; // const findQuestionByDate = (qDate) =>{\n  //     testLogDaySet.map((q)=> {\n  //         if(q.qDate == qDate){\n  //\n  //         }\n  //     })\n  // }\n\n  const editQuestion = (qDate, prop, newValue) => {\n    testLogDaySet.map(q => {\n      if (q.qDate == qDate) {\n        if (prop == 'qText') {} else if (prop == 'qType') {} else {}\n      }\n    });\n  };\n\n  let handleChange = prop => event => {\n    if (prop === \"Daylog\") {\n      setCurrentPage(prop);\n    } else if (prop === \"EditQ\") {\n      setCurrentPage(prop);\n    } else if (prop === \"ViewData\") {\n      setCurrentPage(prop);\n    } else {\n      setCurrentPage(prop);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MenuBar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"Header\",\n        children: \"Day Logger\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Menus\",\n        style: {\n          display: 'flex'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleChange('Daylog'),\n          children: \"Log Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleChange('EditQ'),\n          children: \"Edit Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleChange('ViewData'),\n          children: \"View Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ProfileImg\",\n        onClick: handleChange('Profile'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: 'https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg',\n          style: {\n            width: '40px',\n            borderRadius: '50%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), currentPage == 'Daylog' ? /*#__PURE__*/_jsxDEV(Daylog, {\n      logDays: testLogDaySet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }, this) : currentPage == 'EditQ' ? /*#__PURE__*/_jsxDEV(EditQuestions, {\n      questions: testQSet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }, this) : currentPage == 'Profile' ? /*#__PURE__*/_jsxDEV(Profile, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(ViewData, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Main, \"nBN1nRhyoLVO/6GyZwbY2yJKKq8=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Main.js"],"names":["React","useState","useEffect","Profile","EditQuestions","Daylog","ViewData","getCurrentUserAPIMethod","getDaylogsAPIMethod","Main","curUser","setCurUser","defaultImg","setDefaultImg","imgURL","setImgURL","daylogs","setDaylogs","currentPage","setCurrentPage","then","user","Object","keys","length","hasOwnProperty","profile_url","sortByDate","console","log","list","sort","a","b","date","testQSet","qText","qType","qDate","Date","qChoices","testLogDaySet","qSet","editQuestion","prop","newValue","map","q","handleChange","event","display","width","borderRadius"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Profile from \"./Profile\";\nimport EditQuestions from \"./EditQuestions\";\nimport Daylog from \"./Daylog\";\nimport ViewData from \"./ViewData\";\n\n//import API methods\nimport {\n    getCurrentUserAPIMethod,\n    getDaylogsAPIMethod\n} from \"../api/client.js\";\n\nfunction Main() {\n    const [curUser, setCurUser] = useState({});\n    const [defaultImg, setDefaultImg] = useState(true);\n    const [imgURL, setImgURL] = useState('');\n    const [daylogs, setDaylogs] = useState([]);\n    const [currentPage, setCurrentPage] = useState('Daylog');\n\n    //get daylogs from the server\n    useEffect(() => {\n        getCurrentUserAPIMethod().then((user) => {\n            if (user !== null && Object.keys(user).length !== 0) {\n                if (user.hasOwnProperty('profile_url') && user.profile_url !== '') {\n                    setDefaultImg(true);\n                    setImgURL('');\n                } else {\n                    setDefaultImg(false);\n                    setImgURL(user.profile_url);\n                }\n                setCurUser(user);\n            }\n        });\n        getDaylogsAPIMethod().then((daylogs) => {\n            setDaylogs(sortByDate(daylogs));\n            console.log(daylogs);\n        });\n    }, []);\n\n    const sortByDate = (list) => {\n        return list.sort((a, b) => b.date - a.date);\n    }\n\n    const testQSet = [\n        {qText: \"2019 q1: bool\", qType: \"boolean\", qDate: new Date('2019-06-28')},\n        {qText: \"2019 q2: bool\", qType: \"boolean\", qDate: new Date('2019-06-28')},\n        {qText: \"2019 q3: Text\", qType: \"text\", qDate: new Date('2019-06-28')},\n        {qText: \"2019 q4: Number\", qType: \"number\", qDate: new Date('2019-06-28')},\n        {qText: \"2019 q5: multiple\", qType: \"multiple\", qDate: new Date('2019-06-28'), qChoices: [\"Ok day\", \"Great Day\", \"Bad day\"]},\n    ];\n    const testLogDaySet =[\n        {qDate: new Date('2019-06-28'), qSet: testQSet},\n        {\n            qDate: new Date('2020-07-28'),\n            qSet:\n                [\n                    {qText: \"2020 q1: bool\", qType: \"boolean\", qDate: new Date('2020-07-28')},\n                    {qText: \"2020 q2: bool\", qType: \"boolean\", qDate: new Date('2020-07-28')},\n                    {qText: \"2020 q3: Text\", qType: \"text\", qDate: new Date('2020-07-28')}\n                ]\n        },\n        {\n            qDate: new Date(),\n            qSet: [\n                {qText: \"2021 q1: bool\", qType: \"boolean\", qDate: new Date()},\n                {qText: \"2021 q2: bool\", qType: \"boolean\", qDate: new Date()},\n                {qText: \"2021 q3: Text\", qType: \"text\", qDate: new Date()}\n            ]\n        },\n    ]\n\n    // const findQuestionByDate = (qDate) =>{\n    //     testLogDaySet.map((q)=> {\n    //         if(q.qDate == qDate){\n    //\n    //         }\n    //     })\n    // }\n\n    const editQuestion = (qDate,prop, newValue) => {\n\n        testLogDaySet.map((q)=> {\n            if(q.qDate == qDate){\n\n                if(prop == 'qText'){\n\n                }\n                else if(prop == 'qType'){\n\n                }\n                else{\n\n                }\n            }\n        })\n    }\n\n    let handleChange = (prop) => (event) => {\n        if (prop === \"Daylog\"){\n            setCurrentPage(prop);\n        }\n        else if (prop === \"EditQ\"){\n            setCurrentPage(prop);\n        }\n        else if (prop === \"ViewData\"){\n            setCurrentPage(prop);\n        }\n        else{\n            setCurrentPage(prop);\n        }\n\n    }\n\n\n    return (\n        <div className=\"Main\">\n            <div className= \"MenuBar\" >\n\n                <h2 className=\"Header\">Day Logger</h2>\n\n                <div className= \"Menus\" style={{display: 'flex'}}>\n                    <button onClick={handleChange('Daylog')}>Log Day</button>\n                    <button onClick={handleChange('EditQ')}>Edit Questions</button>\n                    <button onClick={handleChange('ViewData')}>View Data</button>\n                </div>\n\n                <button className={\"ProfileImg\"} onClick={handleChange('Profile')} >\n                    <img src= {'https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg'} style={{width: '40px', borderRadius: '50%'}}/>\n                </button>\n            </div>\n            {currentPage == 'Daylog'?\n                <Daylog logDays={testLogDaySet}></Daylog>:\n                currentPage == 'EditQ'?\n                    <EditQuestions questions = {testQSet}></EditQuestions>:\n                    currentPage == 'Profile'?\n                        <Profile></Profile>:\n                        <ViewData></ViewData>\n            }\n\n\n\n\n        </div>\n\n    );\n}\n\nexport default Main"]},"metadata":{},"sourceType":"module"}