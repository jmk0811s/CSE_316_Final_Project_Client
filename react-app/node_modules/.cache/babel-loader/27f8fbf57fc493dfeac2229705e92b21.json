{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Question(props) {\n  _s();\n\n  const [questionType, setQuestionType] = useState();\n  const [questionHeader, setQuestionHeader] = useState();\n  const [questionAnswer, setQuestionAnswer] = useState();\n  const [questionMDate, setQuestionMDate] = useState();\n  const [questionDate, setQuestionDate] = useState();\n  const [editMode, setEditMode] = useState(props.editMode);\n  const [multipleChoices, setMultipleChoices] = useState(props.qChoices);\n  useEffect(() => {\n    setQuestionType(props.type);\n    setQuestionHeader(props.header);\n    setQuestionAnswer(props.answer);\n    setQuestionMDate(props.mdate);\n    setQuestionDate(props.date);\n    setEditMode(props.editMode); //console.log(\"Type: \" + questionType);\n    //console.log(\"Header: \" + questionHeader);\n  }, [props]);\n\n  const handleSelect = prop => e => {\n    if (prop == \"qType\") {\n      setQuestionType(e.target.value);\n    } else if (prop == \"qText\") {\n      setQuestionHeader(e.target.value);\n    }\n  };\n\n  return editMode ?\n  /*#__PURE__*/\n  //edit mode\n  _jsxDEV(\"div\", {\n    className: \"Question\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 13\n  }, this) :\n  /*#__PURE__*/\n  //read-only mode\n  _jsxDEV(\"div\", {\n    className: \"Question\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-header\",\n      children: questionHeader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this), questionType == \"Text\" ?\n    /*#__PURE__*/\n    //Text type\n    _jsxDEV(\"div\", {\n      className: \"question-answer\",\n      children: questionAnswer.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }, this) : questionType == \"Number\" ?\n    /*#__PURE__*/\n    //Number type\n    _jsxDEV(\"div\", {\n      className: \"question-answer\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: questionAnswer.number\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }, this) : questionType == \"Boolean\" ?\n    /*#__PURE__*/\n    //Boolean type\n    _jsxDEV(\"div\", {\n      className: \"question-answer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"radio\",\n            value: \"true\",\n            checked: questionAnswer.boolean\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 48\n          }, this), \"true\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"radio\",\n            value: \"false\",\n            checked: !questionAnswer.boolean\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 48\n          }, this), \"false\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 33\n    }, this) : questionType == \"MultipleChoice\" ?\n    /*#__PURE__*/\n    //MultipleChoice type\n    _jsxDEV(\"div\", {\n      className: \"question-answer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-wrapper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 37\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 13\n  }, this)\n  /*\n  (editMode?\n      (<div className=\"Question\">\n          <form>\n              <input type=\"text\"\n                     value={questionHeader}\n                     onChange={handleSelect(\"qText\")}></input>\n          </form>\n          <div style={{display: \"flex\",justifyContent: \"space-between\"}}>\n              <select onChange={handleSelect(\"qType\")} value={questionType}>\n                  <option value=\"number\">number</option>\n                  <option value=\"boolean\">boolean</option>\n                  <option value=\"text\">text</option>\n                  <option value=\"multiple\">multiple choice</option>\n                  {}\n              </select>\n               <button style={{background:\"transparent\", border: \"none\"}}>\n                  <span className=\"material-icons\">delete_outline</span>\n              </button>\n          </div>\n      </div>):\n      (<div className=\"Question\">\n          {questionHeader}\n          <div></div>\n          {questionType === 'number'?\n              <form>\n                  <input type ='number'></input>\n              </form> :\n              questionType === 'boolean'?\n                  <form>\n                      <input type=\"radio\" id=\"true\"\n                              name=\"tfRadio\"></input>\n                      <label for=\"true\">True</label>\n                      <input type=\"radio\" id=\"false\"\n                              name=\"tfRadio\" value=\"False\"></input>\n                      <label for=\"false\">False</label>\n                  </form> :\n                  questionType === 'text'?\n                      <form>\n                          <input type = 'text'></input>\n                      </form> :\n                      <form>\n                          {multipleChoices? multipleChoices.map((choice)=>\n                              <React.Fragment>\n                                  <input type=\"radio\" id=\"multipleChoices\" name=\"mcRadio\"></input>\n                                  <label htmlFor=\"multipleChoices\">{choice}</label>\n                              </React.Fragment>\n                          ):<></>}\n                      </form>\n          }\n      </div>)\n  )\n     */\n  ;\n}\n\n_s(Question, \"D+9owpQLvSodFirRGk0CCMGJBl4=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Question.js"],"names":["React","useState","useEffect","Question","props","questionType","setQuestionType","questionHeader","setQuestionHeader","questionAnswer","setQuestionAnswer","questionMDate","setQuestionMDate","questionDate","setQuestionDate","editMode","setEditMode","multipleChoices","setMultipleChoices","qChoices","type","header","answer","mdate","date","handleSelect","prop","e","target","value","text","number","boolean"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAAA;;AACpB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAiCL,QAAQ,EAA/C;AACA,QAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAqCP,QAAQ,EAAnD;AACA,QAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAqCT,QAAQ,EAAnD;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAmCX,QAAQ,EAAjD;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAiCb,QAAQ,EAA/C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAACG,KAAK,CAACW,QAAP,CAAxC;AACA,QAAM,CAACE,eAAD,EAAkBC,kBAAlB,IAAwCjB,QAAQ,CAACG,KAAK,CAACe,QAAP,CAAtD;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,eAAe,CAACF,KAAK,CAACgB,IAAP,CAAf;AACAZ,IAAAA,iBAAiB,CAACJ,KAAK,CAACiB,MAAP,CAAjB;AACAX,IAAAA,iBAAiB,CAACN,KAAK,CAACkB,MAAP,CAAjB;AACAV,IAAAA,gBAAgB,CAACR,KAAK,CAACmB,KAAP,CAAhB;AACAT,IAAAA,eAAe,CAACV,KAAK,CAACoB,IAAP,CAAf;AACAR,IAAAA,WAAW,CAACZ,KAAK,CAACW,QAAP,CAAX,CANY,CAOZ;AACA;AACH,GATQ,EASN,CAACX,KAAD,CATM,CAAT;;AAWA,QAAMqB,YAAY,GAAIC,IAAD,IAAUC,CAAD,IAAO;AACjC,QAAGD,IAAI,IAAI,OAAX,EAAmB;AACfpB,MAAAA,eAAe,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACH,KAFD,MAGK,IAAGH,IAAI,IAAI,OAAX,EAAmB;AACpBlB,MAAAA,iBAAiB,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB;AACH;AAEJ,GARD;;AAUA,SACId,QAAQ;AAAA;AACJ;AACA;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UAFI;AAAA;AAMJ;AACA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACKR;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,EAKQF,YAAY,IAAI,MAAhB;AAAA;AACI;AACA;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACKI,cAAc,CAACqB;AADpB;AAAA;AAAA;AAAA;AAAA,YAFJ,GAMIzB,YAAY,IAAI,QAAhB;AAAA;AACI;AACA;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,KAAK,EAAEI,cAAc,CAACsB;AAF1B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,GASI1B,YAAY,IAAI,SAAhB;AAAA;AACI;AACA;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACI;AAAA,kCAAO;AAAO,YAAA,IAAI,EAAC,OAAZ;AAAoB,YAAA,IAAI,EAAC,OAAzB;AAAiC,YAAA,KAAK,EAAC,MAAvC;AAA8C,YAAA,OAAO,EAAEI,cAAc,CAACuB;AAAtE;AAAA;AAAA;AAAA;AAAA,kBAAP;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,kCAAO;AAAO,YAAA,IAAI,EAAC,OAAZ;AAAoB,YAAA,IAAI,EAAC,OAAzB;AAAiC,YAAA,KAAK,EAAC,OAAvC;AAA+C,YAAA,OAAO,EAAE,CAACvB,cAAc,CAACuB;AAAxE;AAAA;AAAA;AAAA;AAAA,kBAAP;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,GASI3B,YAAY,IAAI,gBAAhB;AAAA;AACI;AACA;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,GAQI,IArCxB;AAAA;AAAA;AAAA;AAAA;AAAA;AA2CJ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvGI;AA4GH;;GA1IQF,Q;;KAAAA,Q;AA2IT,eAAeA,QAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\n\nfunction Question(props){\n    const [questionType, setQuestionType] =useState();\n    const [questionHeader, setQuestionHeader] =useState();\n    const [questionAnswer, setQuestionAnswer] =useState();\n    const [questionMDate, setQuestionMDate] =useState();\n    const [questionDate, setQuestionDate] =useState();\n    const [editMode, setEditMode] = useState(props.editMode);\n    const [multipleChoices, setMultipleChoices] = useState(props.qChoices);\n\n    useEffect(() => {\n        setQuestionType(props.type);\n        setQuestionHeader(props.header);\n        setQuestionAnswer(props.answer);\n        setQuestionMDate(props.mdate);\n        setQuestionDate(props.date);\n        setEditMode(props.editMode);\n        //console.log(\"Type: \" + questionType);\n        //console.log(\"Header: \" + questionHeader);\n    }, [props]);\n\n    const handleSelect = (prop)=> (e) => {\n        if(prop == \"qType\"){\n            setQuestionType(e.target.value)\n        }\n        else if(prop == \"qText\"){\n            setQuestionHeader(e.target.value)\n        }\n\n    }\n\n    return (\n        editMode ?\n            //edit mode\n            <div className=\"Question\">\n\n            </div>\n            :\n            //read-only mode\n            <div className=\"Question\">\n                <div className=\"question-header\">\n                    {questionHeader}\n                </div>\n                {\n                    questionType == \"Text\" ?\n                        //Text type\n                        <div className=\"question-answer\">\n                            {questionAnswer.text}\n                        </div>\n                        :\n                        questionType == \"Number\" ?\n                            //Number type\n                            <div className=\"question-answer\">\n                                <input\n                                    type=\"text\"\n                                    value={questionAnswer.number}\n                                ></input>\n                            </div>\n                            :\n                            questionType == \"Boolean\" ?\n                                //Boolean type\n                                <div className=\"question-answer\">\n                                    <div className=\"radio-wrapper\">\n                                        <label><input type=\"radio\" name=\"radio\" value=\"true\" checked={questionAnswer.boolean}/>true</label>\n                                        <label><input type=\"radio\" name=\"radio\" value=\"false\" checked={!questionAnswer.boolean}/>false</label>\n                                    </div>\n                                </div>\n                                :\n                                questionType == \"MultipleChoice\" ?\n                                    //MultipleChoice type\n                                    <div className=\"question-answer\">\n                                        <div className=\"radio-wrapper\">\n\n                                        </div>\n                                    </div>\n                                    :\n                                    null\n                }\n            </div>\n\n\n\n        /*\n        (editMode?\n            (<div className=\"Question\">\n                <form>\n                    <input type=\"text\"\n                           value={questionHeader}\n                           onChange={handleSelect(\"qText\")}></input>\n                </form>\n                <div style={{display: \"flex\",justifyContent: \"space-between\"}}>\n                    <select onChange={handleSelect(\"qType\")} value={questionType}>\n                        <option value=\"number\">number</option>\n                        <option value=\"boolean\">boolean</option>\n                        <option value=\"text\">text</option>\n                        <option value=\"multiple\">multiple choice</option>\n                        {}\n                    </select>\n\n                    <button style={{background:\"transparent\", border: \"none\"}}>\n                        <span className=\"material-icons\">delete_outline</span>\n                    </button>\n                </div>\n            </div>):\n            (<div className=\"Question\">\n                {questionHeader}\n                <div></div>\n                {questionType === 'number'?\n                    <form>\n                        <input type ='number'></input>\n                    </form> :\n                    questionType === 'boolean'?\n                        <form>\n                            <input type=\"radio\" id=\"true\"\n                                    name=\"tfRadio\"></input>\n                            <label for=\"true\">True</label>\n                            <input type=\"radio\" id=\"false\"\n                                    name=\"tfRadio\" value=\"False\"></input>\n                            <label for=\"false\">False</label>\n                        </form> :\n                        questionType === 'text'?\n                            <form>\n                                <input type = 'text'></input>\n                            </form> :\n                            <form>\n                                {multipleChoices? multipleChoices.map((choice)=>\n                                    <React.Fragment>\n                                        <input type=\"radio\" id=\"multipleChoices\" name=\"mcRadio\"></input>\n                                        <label htmlFor=\"multipleChoices\">{choice}</label>\n                                    </React.Fragment>\n                                ):<></>}\n                            </form>\n                }\n            </div>)\n        )\n\n\n         */\n    );\n}\nexport default Question"]},"metadata":{},"sourceType":"module"}