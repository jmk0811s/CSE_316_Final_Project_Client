{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/LogDay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Question from \"./Question\";\nimport { getResponsesAPIMethod, createResponseAPIMethod, deleteResponseByIdAPIMethod, updateResponseAPIMethod, getQuestionsAPIMethod } from \"../api/client\";\nimport { dateToString, sortByDate } from \"../utils/HelperFunctions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction LogDay(props) {\n  _s();\n\n  const [questions, setQuestions] = useState(props.questions);\n  const [responses, setResponses] = useState(props.responses);\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    getQuestionsAPIMethod().then(questions => {\n      setQuestions(sortByDate(questions));\n    });\n    getResponsesAPIMethod().then(responses => {\n      setResponses(responses);\n    });\n  }, [props, date]);\n\n  const next = () => {\n    let temp = new Date(date);\n    temp.setDate(temp.getDate() + 1);\n\n    if (temp - new Date() < 0) {\n      setDate(temp);\n    }\n  };\n\n  const prev = () => {\n    let temp = new Date(date);\n    temp.setDate(temp.getDate() - 1);\n    setDate(temp);\n  };\n\n  const handleSubmit = () => {\n    getResponsesAPIMethod().then(dbResponses => {\n      console.log(dbResponses);\n\n      for (let i = 0; i < responses.length; i++) {\n        if (responses[i].status === 'ADDED') {\n          //newly added response\n          responses[i].status = '';\n          console.log(\"to be added: \");\n          console.log(responses[i]);\n          createResponseAPIMethod(responses[i]);\n        } else if (responses[i].status === 'UPDATED') {\n          //updated response\n          responses[i].status = '';\n\n          for (let j = 0; j < dbResponses.length; j++) {\n            if (dbResponses[j].question === responses[i].question) {\n              let dbDate = dateToString(new Date(dbResponses[j].date));\n              let localDate = dateToString(new Date(responses[i].date));\n\n              if (dbDate === localDate) {\n                updateResponseAPIMethod(responses[i]);\n              }\n            }\n          }\n        }\n\n        if (responses[i].response.text === '' && responses[i].response.number === null && responses[i].response.boolean === null && responses[i].response.multiple_choice == 0) {\n          //empty response\n          console.log(\"empty response deleted\");\n          deleteResponseByIdAPIMethod(responses[i]._id);\n        }\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LogSelectionBar\",\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prev,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: dateToString(date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: next,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), questions ? questions.filter(question => question.status !== 'DELETED').map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"question-wrapper\",\n      style: {\n        listStyle: \"none\",\n        padding: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Question, {\n        editMode: false,\n        readOnly: false,\n        type: question.type,\n        header: question.header,\n        choices: question.choices,\n        mdate: question.mdate,\n        nanoid: question.nanoid,\n        questions: questions,\n        setQuestions: setQuestions,\n        responses: responses,\n        questionId: question._id,\n        setResponses: setResponses,\n        date: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SubmitButton\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LogDay, \"h1EDudAi8KqZeZuMm1PG6NzwIAo=\");\n\n_c = LogDay;\nexport default LogDay;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogDay\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/LogDay.js"],"names":["React","useState","useEffect","Question","getResponsesAPIMethod","createResponseAPIMethod","deleteResponseByIdAPIMethod","updateResponseAPIMethod","getQuestionsAPIMethod","dateToString","sortByDate","LogDay","props","questions","setQuestions","responses","setResponses","date","setDate","Date","then","next","temp","getDate","prev","handleSubmit","dbResponses","console","log","i","length","status","j","question","dbDate","localDate","response","text","number","boolean","multiple_choice","_id","display","justifyContent","filter","map","listStyle","padding","type","header","choices","mdate","nanoid"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Question from \"./Question\";\nimport {\n    getResponsesAPIMethod,\n    createResponseAPIMethod,\n    deleteResponseByIdAPIMethod,\n    updateResponseAPIMethod,\n    getQuestionsAPIMethod\n} from \"../api/client\";\n\nimport {dateToString, sortByDate} from \"../utils/HelperFunctions\";\n\nfunction LogDay(props) {\n    const [questions, setQuestions] = useState(props.questions);\n    const [responses, setResponses] = useState(props.responses);\n    const [date, setDate] = useState(new Date());\n\n    useEffect(() => {\n        getQuestionsAPIMethod().then((questions) => {\n            setQuestions(sortByDate(questions));\n        });\n        getResponsesAPIMethod().then((responses) => {\n            setResponses(responses);\n        });\n    }, [props, date]);\n\n    const next = () => {\n        let temp = new Date(date);\n        temp.setDate(temp.getDate() + 1);\n        if (temp - new Date() < 0) {\n            setDate(temp);\n        }\n    }\n\n    const prev = () => {\n        let temp = new Date(date);\n        temp.setDate(temp.getDate() - 1);\n        setDate(temp);\n    }\n\n    const handleSubmit = () => {\n        getResponsesAPIMethod().then((dbResponses) => {\n            console.log(dbResponses);\n            for (let i = 0; i < responses.length; i++) {\n                if (responses[i].status === 'ADDED') { //newly added response\n                    responses[i].status = '';\n                    console.log(\"to be added: \");\n                    console.log(responses[i]);\n                    createResponseAPIMethod(responses[i]);\n                }\n                else if (responses[i].status === 'UPDATED') { //updated response\n                    responses[i].status = '';\n                    for (let j = 0; j < dbResponses.length; j++) {\n                        if (dbResponses[j].question === responses[i].question) {\n                            let dbDate = dateToString(new Date(dbResponses[j].date));\n                            let localDate = dateToString(new Date(responses[i].date));\n                            if (dbDate === localDate) {\n                                updateResponseAPIMethod(responses[i]);\n                            }\n                        }\n                    }\n                }\n                if (responses[i].response.text === '' && responses[i].response.number === null && responses[i].response.boolean === null && responses[i].response.multiple_choice == 0) {\n                    //empty response\n                    console.log(\"empty response deleted\");\n                    deleteResponseByIdAPIMethod(responses[i]._id);\n                }\n            }\n        })\n    }\n\n    return (\n        <div>\n            <div className=\"LogSelectionBar\" style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                <button onClick={prev}>\n                    <h2>{\"<\"}</h2>\n                </button>\n                <h2>\n                    {dateToString(date)}\n                </h2>\n                <button onClick={next}>\n                    <h2>{\">\"}</h2>\n                </button>\n            </div>\n            {\n                questions ?\n                    questions.filter((question) => question.status !== 'DELETED').map((question) =>\n                        <li className=\"question-wrapper\" style={{listStyle: \"none\", padding: \"5px\"}}>\n                            <Question\n                                editMode={false}\n                                readOnly={false}\n                                type={question.type}\n                                header={question.header}\n                                choices={question.choices}\n                                mdate={question.mdate}\n                                nanoid={question.nanoid}\n                                questions={questions}\n                                setQuestions={setQuestions}\n                                responses={responses}\n                                questionId={question._id}\n                                setResponses={setResponses}\n                                date={date}\n                            />\n                        </li>\n                    )\n                    : <></>\n            }\n            <div className=\"SubmitButton\" >\n                <button onClick={handleSubmit}>Submit</button>\n            </div>\n        </div>\n    );\n}\nexport default LogDay"]},"metadata":{},"sourceType":"module"}