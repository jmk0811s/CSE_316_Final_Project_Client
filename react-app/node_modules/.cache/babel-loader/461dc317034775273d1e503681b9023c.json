{"ast":null,"code":"const defaultHeaders = {\n  headers: {\n    'Content-Type': 'application/json; charset=UTF-8'\n  }\n}; ////////////////////////////////////////////////////////////////////////////////\n\n/*\n * User\n */\n//register\n\nexport const registerUserAPIMethod = user => {\n  //console.log(user);\n  return fetch(`/api/users`, { ...defaultHeaders,\n    method: 'POST',\n    body: JSON.stringify(user)\n  }).then(checkLoginStatus);\n}; //login\n\nexport const loginUserAPIMethod = user => {\n  return fetch(`/api/login`, { ...defaultHeaders,\n    method: 'POST',\n    body: JSON.stringify(user)\n  }).then(checkLoginStatus);\n}; //logout\n\nexport const logoutUserAPIMethod = () => {\n  return fetch(`/api/logout`, { ...defaultHeaders,\n    method: 'POST'\n  }).then(checkLoginStatus);\n}; //get users (admin)\n\nexport const getUsersAPIMethod = () => {\n  return fetch(`/api/users`, { ...defaultHeaders\n  }).then(checkStatus).then(parseJSON);\n}; //get current user @\n\nexport const getCurrentUserAPIMethod = () => {\n  return fetch(`/api/currentuser`, { ...defaultHeaders\n  }).then(checkStatus).then(parseJSON);\n}; //update user\n\nexport const updateUserAPIMethod = (user, nUser) => {\n  return fetch(`/api/users/${user._id}`, { ...defaultHeaders,\n    method: 'PUT',\n    body: JSON.stringify(nUser)\n  }).then(checkStatus);\n}; //delete user\n\nexport const deleteUserByIdAPIMethod = userId => {\n  return fetch(`/api/users/${userId}`, { ...defaultHeaders,\n    method: 'DELETE'\n  }).then(checkStatus).then(parseJSON);\n}; //upload profile image to cloudinary @\n\nexport const uploadImageToCloudinaryAPIMethod = formData => {\n  const cloudName = 'dxvrj0lkv';\n  return fetch(`https://api.cloudinary.com/v1_1/${cloudName}/upload`, {\n    method: 'POST',\n    body: formData\n  }).then(checkStatus).then(parseJSON);\n}; ////////////////////////////////////////////////////////////////////////////////\n\n/*\n * Question\n */\n//get questions\n\nexport const getQuestionsAPIMethod = () => {\n  return fetch(`/api/questions`, { ...defaultHeaders\n  }).then(checkStatus).then(parseJSON);\n}; //get question by id\n\nexport const getQuestionsByIdAPIMethod = questionId => {\n  return fetch(`/api/questions/${questionId}`, { ...defaultHeaders\n  }).then(checkStatus).then(parseJSON);\n}; //get questions by type\n\nexport const getQuestionsByTypeAPIMethod = questionType => {\n  return fetch(`/api/questions/${questionType}`, { ...defaultHeaders\n  }).then(checkStatus).then(parseJSON);\n}; //add question\n\nexport const createQuestionAPIMethod = question => {\n  return fetch(`/api/questions`, { ...defaultHeaders,\n    method: 'POST',\n    body: JSON.stringify(question)\n  }).then(checkStatus).then(parseJSON);\n}; //update question\n\nexport const updateQuestionAPIMethod = question => {\n  return fetch(`/api/questions/${question._id}`, { ...defaultHeaders,\n    method: 'PUT',\n    body: JSON.stringify(question)\n  }).then(checkStatus);\n}; //delete question\n\nexport const deleteQuestionByIdAPIMethod = questionId => {\n  return fetch(`/api/questions/${questionId}`, { ...defaultHeaders,\n    method: 'DELETE'\n  }).then(checkStatus).then(parseJSON);\n}; ////////////////////////////////////////////////////////////////////////////////\n\n/*\n * Response\n */\n//get responses\n\nexport const getResponsesAPIMethod = () => {\n  return fetch(`/api/responses`, { ...defaultHeaders\n  }).then(checkStatus).then(parseJSON);\n}; //get response by id\n\nexport const getResponseByIdAPIMethod = responseId => {\n  return fetch(`/api/responses/${responseId}`, { ...defaultHeaders\n  }).then(checkStatus).then(parseJSON);\n}; //get responses by date @\n//add response\n\nexport const createResponseAPIMethod = response => {\n  return fetch(`/api/responses`, { ...defaultHeaders,\n    method: 'POST',\n    body: JSON.stringify(response)\n  }).then(checkStatus).then(parseJSON);\n}; //update question\n\nexport const updateResponseAPIMethod = response => {\n  return fetch(`/api/responses/${response._id}`, { ...defaultHeaders,\n    method: 'PUT',\n    body: JSON.stringify(response)\n  }).then(checkStatus);\n}; //delete question\n\nexport const deleteResponseByIdAPIMethod = responseId => {\n  return fetch(`/api/responses/${responseId}`, { ...defaultHeaders,\n    method: 'DELETE'\n  }).then(checkStatus).then(parseJSON);\n}; ////////////////////////////////////////////////////////////////////////////////\n\nfunction checkLoginStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    const error = new Error(`${response.statusText}`);\n    error.status = response.statusText;\n    error.response = response;\n    throw error;\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/api/client.js"],"names":["defaultHeaders","headers","registerUserAPIMethod","user","fetch","method","body","JSON","stringify","then","checkLoginStatus","loginUserAPIMethod","logoutUserAPIMethod","getUsersAPIMethod","checkStatus","parseJSON","getCurrentUserAPIMethod","updateUserAPIMethod","nUser","_id","deleteUserByIdAPIMethod","userId","uploadImageToCloudinaryAPIMethod","formData","cloudName","getQuestionsAPIMethod","getQuestionsByIdAPIMethod","questionId","getQuestionsByTypeAPIMethod","questionType","createQuestionAPIMethod","question","updateQuestionAPIMethod","deleteQuestionByIdAPIMethod","getResponsesAPIMethod","getResponseByIdAPIMethod","responseId","createResponseAPIMethod","response","updateResponseAPIMethod","deleteResponseByIdAPIMethod","status","error","Error","statusText","json"],"mappings":"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","sourcesContent":["\nconst defaultHeaders = {\n    headers: {\n        'Content-Type': 'application/json; charset=UTF-8'\n    },\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*\n * User\n */\n\n//register\nexport const registerUserAPIMethod = (user) => {\n    //console.log(user);\n    return fetch(`/api/users`, {\n        ...defaultHeaders,\n        method: 'POST',\n        body: JSON.stringify(user),\n    }).then(checkLoginStatus);\n}\n\n//login\nexport const loginUserAPIMethod = (user) => {\n    return fetch(`/api/login`, {\n        ...defaultHeaders,\n        method: 'POST',\n        body: JSON.stringify(user),\n    }).then(checkLoginStatus);\n}\n\n//logout\nexport const logoutUserAPIMethod = () => {\n    return fetch(`/api/logout`, {\n        ...defaultHeaders,\n        method: 'POST',\n    }).then(checkLoginStatus);\n}\n\n//get users (admin)\nexport const getUsersAPIMethod = () => {\n    return fetch(`/api/users`, {\n        ...defaultHeaders,\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n//get current user @\nexport const getCurrentUserAPIMethod = () => {\n    return fetch(`/api/currentuser`, {\n        ...defaultHeaders,\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n//update user\nexport const updateUserAPIMethod = (user, nUser) => {\n    return fetch(`/api/users/${user._id}`, {\n        ...defaultHeaders,\n        method: 'PUT',\n        body: JSON.stringify(nUser),\n    }).then(checkStatus);\n}\n\n//delete user\nexport const deleteUserByIdAPIMethod = (userId) => {\n    return fetch(`/api/users/${userId}`, {\n        ...defaultHeaders,\n        method: 'DELETE',\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n//upload profile image to cloudinary @\nexport const uploadImageToCloudinaryAPIMethod = (formData) => {\n    const cloudName = 'dxvrj0lkv';\n    return fetch(`https://api.cloudinary.com/v1_1/${cloudName}/upload`, {\n        method: 'POST',\n        body: formData,\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*\n * Question\n */\n\n//get questions\nexport const getQuestionsAPIMethod = () => {\n    return fetch(`/api/questions`, {\n        ...defaultHeaders,\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n//get question by id\nexport const getQuestionsByIdAPIMethod = (questionId) => {\n    return fetch(`/api/questions/${questionId}`, {\n        ...defaultHeaders,\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n//get questions by type\nexport const getQuestionsByTypeAPIMethod = (questionType) => {\n    return fetch(`/api/questions/${questionType}`, {\n        ...defaultHeaders,\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n//add question\nexport const createQuestionAPIMethod = (question) => {\n    return fetch(`/api/questions`, {\n        ...defaultHeaders,\n        method: 'POST',\n        body: JSON.stringify(question),\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n//update question\nexport const updateQuestionAPIMethod = (question) => {\n    return fetch(`/api/questions/${question._id}`, {\n        ...defaultHeaders,\n        method: 'PUT',\n        body: JSON.stringify(question),\n    }).then(checkStatus);\n}\n\n//delete question\nexport const deleteQuestionByIdAPIMethod = (questionId) => {\n    return fetch(`/api/questions/${questionId}`, {\n        ...defaultHeaders,\n        method: 'DELETE',\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*\n * Response\n */\n\n//get responses\nexport const getResponsesAPIMethod = () => {\n    return fetch(`/api/responses`, {\n        ...defaultHeaders,\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n//get response by id\nexport const getResponseByIdAPIMethod = (responseId) => {\n    return fetch(`/api/responses/${responseId}`, {\n        ...defaultHeaders,\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n//get responses by date @\n\n//add response\nexport const createResponseAPIMethod = (response) => {\n    return fetch(`/api/responses`, {\n        ...defaultHeaders,\n        method: 'POST',\n        body: JSON.stringify(response),\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n//update question\nexport const updateResponseAPIMethod = (response) => {\n    return fetch(`/api/responses/${response._id}`, {\n        ...defaultHeaders,\n        method: 'PUT',\n        body: JSON.stringify(response),\n    }).then(checkStatus);\n}\n\n//delete question\nexport const deleteResponseByIdAPIMethod = (responseId) => {\n    return fetch(`/api/responses/${responseId}`, {\n        ...defaultHeaders,\n        method: 'DELETE',\n    }).then(checkStatus)\n        .then(parseJSON);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction checkLoginStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n        return response;\n    } else {\n        const error = new Error(`${response.statusText}`);\n        error.status = response.statusText;\n        error.response = response;\n        throw error;\n    }\n}\n\nfunction parseJSON(response) {\n    return response.json();\n}"]},"metadata":{},"sourceType":"module"}