{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Question(props) {\n  _s();\n\n  const [editMode, setEditMode] = useState(props.editMode);\n  const [type, setType] = useState(props.type);\n  const [header, setHeader] = useState(props.header);\n  const [choices, setChoices] = useState(props.choices);\n  const [mdate, setMDate] = useState(props.mdate);\n  const [nanoid, setNanoid] = useState(props.nanoid);\n  const [questions, setQuestions] = useState(props.questions);\n  const [responses, setResponses] = useState(props.responses);\n  const [questionId, setQuestionId] = useState(props.questionId);\n  const [date, setDate] = useState(props.date);\n  useEffect(() => {\n    setEditMode(props.editMode);\n    setType(props.type);\n    setChoices(props.choices);\n    setHeader(props.header);\n    setMDate(props.mdate);\n    setNanoid(props.nanoid);\n    setQuestions(props.questions);\n    setResponses(props.responses);\n    setQuestionId(props.questionId);\n    setDate(props.date);\n  }, [props]);\n  useEffect(() => {\n    console.log(responses);\n  }, [responses]);\n\n  const updateQuestions = (newValue, field) => {\n    let newQuestions = [];\n\n    for (let i = 0; i < questions.length; i++) {\n      if (questions[i].nanoid === nanoid) {\n        let newQuestion = {\n          type: field === 'type' ? newValue : type,\n          header: field === 'header' ? newValue : header,\n          choices: field === 'multiple_choice' ? newValue : choices,\n          mdate: mdate,\n          nanoid: nanoid,\n          status: questions[i].status\n        };\n        console.log(newQuestion);\n        newQuestions.push(newQuestion);\n      } else {\n        newQuestions.push(questions[i]);\n      }\n    }\n\n    props.setQuestions(newQuestions); //console.log(\"updated@\");\n  };\n\n  const addChoice = () => {\n    choices.push(\"\");\n    updateQuestions(choices, 'multiple_choice');\n  };\n\n  const deleteChoice = index => {\n    let newChoices = [];\n\n    for (let i = 0; i < choices.length; i++) {\n      if (index !== i) {\n        newChoices.push(choices[i]);\n      }\n    }\n\n    updateQuestions(newChoices, 'multiple_choice');\n  };\n\n  const updateChoice = (e, index) => {\n    let newChoices = [];\n\n    for (let i = 0; i < choices.length; i++) {\n      if (index == i) {\n        newChoices[i] = e.target.value;\n      } else {\n        newChoices.push(choices[i]);\n      }\n    }\n\n    updateQuestions(newChoices, 'multiple_choice');\n  };\n\n  const updateResponse = (res, type) => {\n    let oldResponse = responses.find(res => res.question === questionId && res.date === date);\n    let newResponse = {\n      response: {\n        text: type === 'Text' ? res : '',\n        number: type === 'Number' ? res : null,\n        boolean: type === 'Boolean' ? res : null,\n        multiple_choice: type === 'MultipleChoice' ? res : []\n      },\n      date: props.date,\n      question: props.questionId,\n      status: 'ADDED'\n    };\n    let newResponses = [];\n\n    if (oldResponse === undefined) {\n      // If there is no response, create a new one\n      for (let i = 0; i < responses.length; i++) {\n        newResponses.push(responses[i]);\n      }\n\n      newResponses.push(newResponse);\n      props.setResponses(newResponses);\n    } else {\n      // If there is a response, update it\n      for (let i = 0; i < responses.length; i++) {\n        if (responses[i] === oldResponse) {\n          newResponses.push(newResponse);\n        } else {\n          newResponses.push(responses[i]);\n        }\n      }\n\n      props.setResponses(newResponses);\n    }\n  };\n\n  return editMode ?\n  /*#__PURE__*/\n  //Edit mode\n  _jsxDEV(\"div\", {\n    className: \"Question\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-header\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        // question header\n        type: \"text\",\n        name: \"header\",\n        value: header,\n        placeholder: \"Header\",\n        onChange: e => {\n          setHeader(e.target.value);\n          updateQuestions(e.target.value, 'header');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          // dropdown question type selection menu\n          value: type,\n          onChange: e => {\n            setType(e.target.value);\n            updateQuestions(e.target.value, 'type');\n          },\n          className: \"dropdown\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Text\",\n            children: \"Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Number\",\n            children: \"Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Boolean\",\n            children: \"Boolean\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"MultipleChoice\",\n            children: \"Multiple Choice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => props.deleteQuestion(nanoid),\n        style: {\n          background: \"transparent\",\n          border: \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-icons\",\n          children: \"delete_outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this), type === 'MultipleChoice' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radio-wrapper1\",\n      style: {\n        margin: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addChoice,\n        style: {\n          background: \"transparent\",\n          border: \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-icons\",\n          children: \"add_circle_outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-wrapper2\",\n        children: choices.map((choice, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"radio-wrapper3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"radio\",\n              value: \"true\",\n              checked: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 52\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"text\",\n              value: choice,\n              placeholder: \"new choice\",\n              onChange: e => updateChoice(e, i)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 49\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteChoice(i),\n            style: {\n              background: \"transparent\",\n              border: \"none\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"delete_outline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 41\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 25\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 13\n  }, this) :\n  /*#__PURE__*/\n  // Answer mode\n  _jsxDEV(\"div\", {\n    className: \"Question\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-header\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"header\",\n        value: header,\n        placeholder: \"Header\",\n        onChange: e => setHeader(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }, this), type == \"Text\" ?\n    /*#__PURE__*/\n    //Text type\n    _jsxDEV(\"div\", {\n      className: \"question-response\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"answer\",\n        value: responses.filter(res => res.question === questionId && res.date === date).text,\n        placeholder: \"Response\",\n        onChange: e => updateResponse(e.target.value, 'Text')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }, this) : type == \"Number\" ?\n    /*#__PURE__*/\n    //Number type\n    _jsxDEV(\"div\", {\n      className: \"question-response\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"answer\",\n        value: responses.filter(res => res.question === questionId && res.date === date).number,\n        placeholder: \"Response\",\n        onChange: e => updateResponse(e.target.value, 'Text')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 29\n    }, this) : type == \"Boolean\" ?\n    /*#__PURE__*/\n    //Boolean type\n    _jsxDEV(\"div\", {\n      className: \"question-response\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"radio\",\n            value: \"true\",\n            checked: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 48\n          }, this), \"true\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"radio\",\n            value: \"false\",\n            checked: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 48\n          }, this), \"false\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 33\n    }, this) : type == \"MultipleChoice\" ?\n    /*#__PURE__*/\n    //MultipleChoice type\n    _jsxDEV(\"div\", {\n      className: \"question-response\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-wrapper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 37\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Question, \"PQIDYd7LPUE38OD3boCgQg3HxQU=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Question.js"],"names":["React","useState","useEffect","Question","props","editMode","setEditMode","type","setType","header","setHeader","choices","setChoices","mdate","setMDate","nanoid","setNanoid","questions","setQuestions","responses","setResponses","questionId","setQuestionId","date","setDate","console","log","updateQuestions","newValue","field","newQuestions","i","length","newQuestion","status","push","addChoice","deleteChoice","index","newChoices","updateChoice","e","target","value","updateResponse","res","oldResponse","find","question","newResponse","response","text","number","boolean","multiple_choice","newResponses","undefined","deleteQuestion","background","border","margin","map","choice","filter"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\n\nfunction Question(props) {\n    const [editMode, setEditMode] = useState(props.editMode);\n    const [type, setType] = useState(props.type);\n    const [header, setHeader] = useState(props.header);\n    const [choices, setChoices] = useState(props.choices);\n    const [mdate, setMDate] = useState(props.mdate);\n    const [nanoid, setNanoid] = useState(props.nanoid);\n    const [questions, setQuestions] = useState(props.questions);\n    const [responses, setResponses] = useState(props.responses);\n    const [questionId, setQuestionId] = useState(props.questionId);\n    const [date, setDate] = useState(props.date);\n\n    useEffect(() => {\n        setEditMode(props.editMode);\n        setType(props.type);\n        setChoices(props.choices);\n        setHeader(props.header);\n        setMDate(props.mdate);\n        setNanoid(props.nanoid);\n        setQuestions(props.questions);\n        setResponses(props.responses);\n        setQuestionId(props.questionId);\n        setDate(props.date);\n    }, [props]);\n\n    useEffect(() => {\n        console.log(responses);\n    }, [responses]);\n\n    const updateQuestions = (newValue, field) => {\n        let newQuestions = [];\n        for (let i = 0; i < questions.length; i++) {\n            if (questions[i].nanoid === nanoid) {\n                let newQuestion = {\n                    type: field === 'type' ? newValue : type,\n                    header: field === 'header' ? newValue : header,\n                    choices: field === 'multiple_choice' ? newValue : choices,\n                    mdate: mdate,\n                    nanoid: nanoid,\n                    status: questions[i].status\n                }\n                console.log(newQuestion);\n                newQuestions.push(newQuestion);\n            }\n            else {\n                newQuestions.push(questions[i]);\n            }\n        }\n        props.setQuestions(newQuestions);\n        //console.log(\"updated@\");\n    }\n\n    const addChoice = () => {\n        choices.push(\"\");\n        updateQuestions(choices, 'multiple_choice');\n    }\n\n    const deleteChoice = (index) => {\n        let newChoices = [];\n        for (let i = 0; i < choices.length; i++) {\n            if (index !== i) {\n                newChoices.push(choices[i]);\n            }\n        }\n        updateQuestions(newChoices, 'multiple_choice');\n    }\n\n    const updateChoice = (e, index) => {\n        let newChoices = [];\n        for (let i = 0; i < choices.length; i++) {\n            if (index == i) {\n                newChoices[i] = e.target.value;\n            }\n            else {\n                newChoices.push(choices[i]);\n            }\n        }\n        updateQuestions(newChoices, 'multiple_choice');\n    }\n\n    const updateResponse = (res, type) => {\n        let oldResponse = responses.find((res) => res.question === questionId && res.date === date);\n        let newResponse = {\n            response: {\n                text: type === 'Text' ? res : '',\n                number: type === 'Number' ? res : null,\n                boolean: type === 'Boolean' ? res : null,\n                multiple_choice: type === 'MultipleChoice' ? res : []\n            },\n            date: props.date,\n            question: props.questionId,\n            status: 'ADDED'\n        }\n        let newResponses = [];\n        if (oldResponse === undefined) { // If there is no response, create a new one\n            for (let i = 0; i < responses.length; i++) {\n                newResponses.push(responses[i]);\n            }\n            newResponses.push(newResponse);\n            props.setResponses(newResponses);\n        }\n        else { // If there is a response, update it\n            for (let i = 0; i < responses.length; i++) {\n                if (responses[i] === oldResponse) {\n                    newResponses.push(newResponse);\n                }\n                else {\n                    newResponses.push(responses[i]);\n                }\n            }\n            props.setResponses(newResponses);\n        }\n    }\n\n    return (\n        editMode ?\n            //Edit mode\n            <div className=\"Question\">\n                <div className=\"question-header\">\n                    <input // question header\n                        type=\"text\"\n                        name=\"header\"\n                        value={header}\n                        placeholder={\"Header\"}\n                        onChange={(e) => {setHeader(e.target.value);updateQuestions(e.target.value, 'header');}}/>\n                </div>\n                <div className= \"question-body\">\n                    <div>\n                        <select // dropdown question type selection menu\n                            value={type}\n                            onChange={(e) => {setType(e.target.value);updateQuestions(e.target.value, 'type');}}\n                            className=\"dropdown\">\n                            <option value=\"Text\">Text</option>\n                            <option value=\"Number\">Number</option>\n                            <option value=\"Boolean\">Boolean</option>\n                            <option value=\"MultipleChoice\">Multiple Choice</option>\n                        </select>\n                    </div>\n\n                    <button onClick={() => props.deleteQuestion(nanoid)} style={{background: \"transparent\", border: \"none\"}}>\n                        <span  className=\"material-icons\">delete_outline</span>\n                    </button>\n                </div>\n\n                {\n                    type === 'MultipleChoice' ?\n                        <div className=\"radio-wrapper1\" style={{margin:\"10px\"}}>\n                            <button onClick={addChoice} style={{background: \"transparent\", border: \"none\"}}>\n                                <span  className=\"material-icons\">add_circle_outline</span>\n                            </button>\n                            <div className=\"radio-wrapper2\">\n                                {\n                                    choices.map((choice, i) =>\n                                        <div className=\"radio-wrapper3\">\n                                            <label><input type=\"radio\" name=\"radio\" value=\"true\" checked={false}/>\n                                                <input type=\"text\" name=\"text\" value={choice} placeholder=\"new choice\" onChange={(e) => updateChoice(e, i)}/>\n                                            </label>\n                                            <button onClick={() => deleteChoice(i)} style={{background: \"transparent\", border: \"none\"}}>\n                                                <span  className=\"material-icons\">delete_outline</span>\n                                            </button>\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                        :\n                        null\n                }\n\n            </div>\n            :\n            // Answer mode\n            <div className=\"Question\">\n                <div className=\"question-header\">\n                    <input\n                        type=\"text\"\n                        name=\"header\"\n                        value={header}\n                        placeholder={\"Header\"}\n                        onChange={(e) => setHeader(e.target.value)}/>\n                </div>\n                {\n                    type == \"Text\" ?\n                        //Text type\n                        <div className=\"question-response\">\n                            <input\n                                type=\"text\"\n                                name=\"answer\"\n                                value={responses.filter((res) => res.question === questionId && res.date === date).text}\n                                placeholder={\"Response\"}\n                                onChange={(e) => updateResponse(e.target.value, 'Text')}\n                            />\n                        </div>\n                        :\n                        type == \"Number\" ?\n                            //Number type\n                            <div className=\"question-response\">\n                                <input\n                                    type=\"text\"\n                                    name=\"answer\"\n                                    value={responses.filter((res) => res.question === questionId && res.date === date).number}\n                                    placeholder={\"Response\"}\n                                    onChange={(e) => updateResponse(e.target.value, 'Text')}\n                                />\n                            </div>\n                            :\n                            type == \"Boolean\" ?\n                                //Boolean type\n                                <div className=\"question-response\">\n                                    <div className=\"radio-wrapper\">\n                                        <label><input type=\"radio\" name=\"radio\" value=\"true\" checked={true}/>true</label>\n                                        <label><input type=\"radio\" name=\"radio\" value=\"false\" checked={false}/>false</label>\n                                    </div>\n                                </div>\n                                :\n                                type == \"MultipleChoice\" ?\n                                    //MultipleChoice type\n                                    <div className=\"question-response\">\n                                        <div className=\"radio-wrapper\">\n\n                                        </div>\n                                    </div>\n                                    :\n                                    null\n                }\n            </div>\n    );\n}\nexport default Question"]},"metadata":{},"sourceType":"module"}