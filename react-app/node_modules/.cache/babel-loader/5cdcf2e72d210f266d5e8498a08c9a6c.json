{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/LogDay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Question from \"./Question\";\nimport { getResponsesAPIMethod, createResponseAPIMethod, deleteResponseByIdAPIMethod, updateResponseAPIMethod, getQuestionsAPIMethod } from \"../api/client\";\nimport { dateToString, sortByDate } from \"../utils/HelperFunctions\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction LogDay(props) {\n  _s();\n\n  const [questions, setQuestions] = useState(props.questions);\n  const [responses, setResponses] = useState(props.responses);\n  const [dbResponses, setDBResponses] = useState([]);\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    getQuestionsAPIMethod().then(questions => {\n      setQuestions(sortByDate(questions));\n    });\n    getResponsesAPIMethod().then(responses => {\n      setResponses(responses);\n      setDBResponses(responses);\n    }); //console.log(\"useEffect in LogDay\");\n  }, [props, date]);\n\n  const next = () => {\n    let temp = new Date(date);\n    temp.setDate(temp.getDate() + 1);\n\n    if (temp - new Date() < 0) {\n      setDate(temp);\n    }\n  };\n\n  const prev = () => {\n    let temp = new Date(date);\n    temp.setDate(temp.getDate() - 1);\n    setDate(temp);\n  };\n\n  const handleSubmit = () => {\n    console.log(\"DB responses: \");\n    console.log(dbResponses);\n    console.log(\"local responses: \");\n    console.log(responses);\n\n    for (let i = 0; i < responses.length; i++) {\n      if (responses[i].status === 'ADDED') {\n        //newly added response\n        responses[i].status = '';\n        console.log(\"ADDED\"); //console.log(responses[i]);\n\n        createResponseAPIMethod(responses[i]);\n      } else if (responses[i].status === 'UPDATED' || true) {\n        //updated response\n        responses[i].status = '';\n\n        for (let j = 0; j < dbResponses.length; j++) {\n          if (dbResponses[j].question === responses[i].question) {\n            let dbDate = dateToString(new Date(dbResponses[j].date));\n            let localDate = dateToString(new Date(responses[i].date));\n\n            if (dbDate === localDate) {\n              console.log(\"@@@@@@ match found @@@@@@\");\n              console.log(responses[i]);\n              updateResponseAPIMethod(responses[i]);\n              break;\n            }\n          }\n        }\n      }\n\n      if (responses[i].response.text === '' && responses[i].response.number === null && responses[i].response.boolean === null && responses[i].response.multiple_choice == 0) {\n        //empty response\n        console.log(\"empty response deleted\");\n        deleteResponseByIdAPIMethod(responses[i]._id);\n      }\n    }\n  };\n\n  const addResponse = (res, type, index, choices, currResponse, questionId) => {\n    let newChoiceList = [];\n\n    if (type === 'MultipleChoice') {\n      for (let i = 0; i < choices.length; i++) {\n        if (index === i) {\n          newChoiceList.push(true);\n        } else {\n          newChoiceList.push(false);\n        }\n      }\n    }\n\n    let id = nanoid();\n    let newResponse = {\n      response: {\n        text: type === 'Text' ? res += \"\" : '',\n        number: type === 'Number' ? res *= 1 : null,\n        boolean: type === 'Boolean' ? JSON.parse(res) : null,\n        multiple_choice: type === 'MultipleChoice' ? newChoiceList : []\n      },\n      date: date,\n      nanoid: id,\n      question: questionId,\n      status: 'ADDED'\n    };\n    let newResponses = [];\n\n    for (let i = 0; i < responses.length; i++) {\n      newResponses.push(responses[i]);\n    }\n\n    newResponses.push(newResponse);\n    setResponses(newResponses);\n  };\n\n  const updateResponse = (res, type, index, choices, currResponse, questionId) => {\n    let oldResponse = currResponse;\n\n    if (oldResponse === undefined) {\n      addResponse(res, type, index, choices, currResponse, questionId);\n      console.log(\"response added\");\n      return;\n    }\n\n    console.log(\"response updated\");\n    let newChoiceList = [];\n\n    if (type === 'MultipleChoice') {\n      for (let i = 0; i < choices.length; i++) {\n        if (index == i) {\n          newChoiceList.push(true);\n        } else {\n          newChoiceList.push(false);\n        }\n      }\n    }\n\n    console.log(\"new choice list: \");\n    console.log(newChoiceList);\n    console.log(index);\n    let id = nanoid();\n    let newResponse = {\n      _id: oldResponse._id,\n      response: {\n        text: type === 'Text' ? res += \"\" : '',\n        number: type === 'Number' ? res *= 1 : null,\n        boolean: type === 'Boolean' ? JSON.parse(res) : null,\n        multiple_choice: type === 'MultipleChoice' ? newChoiceList : []\n      },\n      date: date,\n      nanoid: id,\n      question: questionId,\n      status: 'UPDATED' //keep disappearing\n\n    };\n    let newResponses = [];\n\n    for (let i = 0; i < responses.length; i++) {\n      if (responses[i].question === oldResponse.question) {\n        //newResponse.status = 'UPDATED';\n        newResponse.nanoid = responses[i].nanoid;\n        console.log(\"@@@ found @@@\");\n        console.log(newResponse);\n        newResponses.push(newResponse);\n      } else {\n        newResponses.push(responses[i]);\n      }\n    }\n\n    setResponses(newResponses);\n    console.log(newResponse);\n    console.log(newResponses);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LogSelectionBar\",\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prev,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: dateToString(date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: next,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), questions ? questions.filter(question => question.status !== 'DELETED').map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"question-wrapper\",\n      style: {\n        listStyle: \"none\",\n        padding: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Question, {\n        editMode: false,\n        readOnly: false,\n        type: question.type,\n        header: question.header,\n        choices: question.choices,\n        mdate: question.mdate,\n        nanoid: question.nanoid,\n        questions: questions,\n        setQuestions: setQuestions,\n        responses: responses,\n        questionId: question._id,\n        setResponses: setResponses,\n        date: date,\n        updateResponse: updateResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 25\n    }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SubmitButton\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LogDay, \"qim7QntSH2sOj9Jk2kxQBWdCFKc=\");\n\n_c = LogDay;\nexport default LogDay;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogDay\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/LogDay.js"],"names":["React","useState","useEffect","Question","getResponsesAPIMethod","createResponseAPIMethod","deleteResponseByIdAPIMethod","updateResponseAPIMethod","getQuestionsAPIMethod","dateToString","sortByDate","nanoid","LogDay","props","questions","setQuestions","responses","setResponses","dbResponses","setDBResponses","date","setDate","Date","then","next","temp","getDate","prev","handleSubmit","console","log","i","length","status","j","question","dbDate","localDate","response","text","number","boolean","multiple_choice","_id","addResponse","res","type","index","choices","currResponse","questionId","newChoiceList","push","id","newResponse","JSON","parse","newResponses","updateResponse","oldResponse","undefined","display","justifyContent","filter","map","listStyle","padding","header","mdate"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Question from \"./Question\";\nimport {\n    getResponsesAPIMethod,\n    createResponseAPIMethod,\n    deleteResponseByIdAPIMethod,\n    updateResponseAPIMethod,\n    getQuestionsAPIMethod\n} from \"../api/client\";\n\nimport {dateToString, sortByDate} from \"../utils/HelperFunctions\";\nimport {nanoid} from \"nanoid\";\n\nfunction LogDay(props) {\n    const [questions, setQuestions] = useState(props.questions);\n    const [responses, setResponses] = useState(props.responses);\n    const [dbResponses, setDBResponses] = useState([]);\n    const [date, setDate] = useState(new Date());\n\n    useEffect(() => {\n        getQuestionsAPIMethod().then((questions) => {\n            setQuestions(sortByDate(questions));\n        });\n        getResponsesAPIMethod().then((responses) => {\n            setResponses(responses);\n            setDBResponses(responses);\n        });\n        //console.log(\"useEffect in LogDay\");\n    }, [props, date]);\n\n    const next = () => {\n        let temp = new Date(date);\n        temp.setDate(temp.getDate() + 1);\n        if (temp - new Date() < 0) {\n            setDate(temp);\n        }\n    }\n\n    const prev = () => {\n        let temp = new Date(date);\n        temp.setDate(temp.getDate() - 1);\n        setDate(temp);\n    }\n\n    const handleSubmit = () => {\n        console.log(\"DB responses: \");\n        console.log(dbResponses);\n        console.log(\"local responses: \");\n        console.log(responses);\n\n        for (let i = 0; i < responses.length; i++) {\n            if (responses[i].status === 'ADDED') { //newly added response\n                responses[i].status = '';\n                console.log(\"ADDED\");\n                //console.log(responses[i]);\n                createResponseAPIMethod(responses[i]);\n            }\n            else if (responses[i].status === 'UPDATED' || true) { //updated response\n                responses[i].status = '';\n                for (let j = 0; j < dbResponses.length; j++) {\n                    if (dbResponses[j].question === responses[i].question) {\n                        let dbDate = dateToString(new Date(dbResponses[j].date));\n                        let localDate = dateToString(new Date(responses[i].date));\n                        if (dbDate === localDate) {\n                            console.log(\"@@@@@@ match found @@@@@@\");\n                            console.log(responses[i]);\n                            updateResponseAPIMethod(responses[i]);\n                            break;\n                        }\n                    }\n                }\n            }\n            if (responses[i].response.text === '' && responses[i].response.number === null && responses[i].response.boolean === null && responses[i].response.multiple_choice == 0) {\n                //empty response\n                console.log(\"empty response deleted\");\n                deleteResponseByIdAPIMethod(responses[i]._id);\n            }\n        }\n    }\n\n    const addResponse = (res, type, index, choices, currResponse, questionId) => {\n        let newChoiceList = [];\n        if (type === 'MultipleChoice') {\n            for (let i = 0; i < choices.length; i++) {\n                if (index === i) {\n                    newChoiceList.push(true);\n                }\n                else {\n                    newChoiceList.push(false);\n                }\n            }\n        }\n        let id = nanoid();\n        let newResponse = {\n            response: {\n                text: type === 'Text' ? res+=\"\" : '',\n                number: type === 'Number' ? res*=1 : null,\n                boolean: type === 'Boolean' ? JSON.parse(res) : null,\n                multiple_choice: type === 'MultipleChoice' ? newChoiceList : []\n            },\n            date: date,\n            nanoid: id,\n            question: questionId,\n            status: 'ADDED'\n        }\n        let newResponses = [];\n        for (let i = 0; i < responses.length; i++) {\n            newResponses.push(responses[i]);\n        }\n        newResponses.push(newResponse);\n        setResponses(newResponses);\n    }\n\n    const updateResponse = (res, type, index, choices, currResponse, questionId) => {\n        let oldResponse = currResponse;\n        if (oldResponse === undefined) {\n            addResponse(res, type, index, choices, currResponse, questionId);\n            console.log(\"response added\");\n            return;\n        }\n        console.log(\"response updated\");\n        let newChoiceList = [];\n        if (type === 'MultipleChoice') {\n            for (let i = 0; i < choices.length; i++) {\n                if (index == i) {\n                    newChoiceList.push(true);\n                }\n                else {\n                    newChoiceList.push(false);\n                }\n            }\n        }\n        console.log(\"new choice list: \")\n        console.log(newChoiceList);\n        console.log(index);\n        let id = nanoid();\n        let newResponse = {\n            _id: oldResponse._id,\n            response: {\n                text: type === 'Text' ? res+=\"\" : '',\n                number: type === 'Number' ? res*=1 : null,\n                boolean: type === 'Boolean' ? JSON.parse(res) : null,\n                multiple_choice: type === 'MultipleChoice' ? newChoiceList : []\n            },\n            date: date,\n            nanoid: id,\n            question: questionId,\n            status: 'UPDATED' //keep disappearing\n        }\n        let newResponses = [];\n        for (let i = 0; i < responses.length; i++) {\n            if (responses[i].question === oldResponse.question) {\n                //newResponse.status = 'UPDATED';\n                newResponse.nanoid = responses[i].nanoid;\n                console.log(\"@@@ found @@@\");\n                console.log(newResponse);\n                newResponses.push(newResponse);\n            }\n            else {\n                newResponses.push(responses[i]);\n            }\n        }\n        setResponses(newResponses);\n        console.log(newResponse);\n        console.log(newResponses);\n    }\n\n    return (\n        <div>\n            <div className=\"LogSelectionBar\" style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                <button onClick={prev}>\n                    <h2>{\"<\"}</h2>\n                </button>\n                <h2>\n                    {dateToString(date)}\n                </h2>\n                <button onClick={next}>\n                    <h2>{\">\"}</h2>\n                </button>\n            </div>\n            {\n                questions ?\n                    questions.filter((question) => question.status !== 'DELETED').map((question) =>\n                        <li className=\"question-wrapper\" style={{listStyle: \"none\", padding: \"5px\"}}>\n                            <Question\n                                editMode={false}\n                                readOnly={false}\n                                type={question.type}\n                                header={question.header}\n                                choices={question.choices}\n                                mdate={question.mdate}\n                                nanoid={question.nanoid}\n                                questions={questions}\n                                setQuestions={setQuestions}\n                                responses={responses}\n                                questionId={question._id}\n                                setResponses={setResponses}\n                                date={date}\n                                updateResponse={updateResponse}\n                            />\n                        </li>\n                    )\n                    : <></>\n            }\n            <div className=\"SubmitButton\" >\n                <button onClick={handleSubmit}>Submit</button>\n            </div>\n        </div>\n    );\n}\nexport default LogDay"]},"metadata":{},"sourceType":"module"}