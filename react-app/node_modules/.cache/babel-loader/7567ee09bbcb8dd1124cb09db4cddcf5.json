{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Question(props) {\n  _s();\n\n  const [editMode, setEditMode] = useState(props.editMode);\n  const [type, setType] = useState(props.type);\n  const [header, setHeader] = useState(props.header);\n  const [mdate, setMDate] = useState(props.mdate);\n  const [nanoid, setNanoid] = useState(props.nanoid);\n  const [questions, setQuestions] = useState(props.questions);\n  const [responses, setResponses] = useState(props.responses);\n  const [index, setIndex] = useState(props.index);\n  useEffect(() => {\n    setEditMode(props.editMode);\n    setType(props.type);\n    setHeader(props.header);\n    setMDate(props.mdate);\n    setNanoid(props.nanoid);\n    setQuestions(props.questions);\n    setResponses(props.responses);\n    setIndex(props.index);\n  }, [props]);\n  useEffect(() => {//console.log(responses);\n  }, [props.responses]);\n\n  const handleChange = (newValue, field) => {\n    let newQuestions = [];\n\n    for (let i = 0; i < questions.length; i++) {\n      if (questions[i].nanoid === nanoid) {\n        let newQuestion = {\n          type: field === 'type' ? newValue : type,\n          header: field === 'header' ? newValue : header,\n          mdate: mdate,\n          nanoid: nanoid,\n          status: questions[i].status\n        };\n        console.log(newQuestion);\n        newQuestions.push(newQuestion);\n      } else {\n        newQuestions.push(questions[i]);\n      }\n    }\n\n    props.setQuestions(newQuestions);\n    console.log(\"updated@\");\n  };\n\n  const addChoice = () => {};\n\n  return editMode ?\n  /*#__PURE__*/\n  //Edit mode\n  _jsxDEV(\"div\", {\n    className: \"Question\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-header\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        // question header\n        type: \"text\",\n        name: \"header\",\n        value: header,\n        placeholder: \"Header\",\n        onChange: e => {\n          setHeader(e.target.value);\n          handleChange(e.target.value, 'header');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      // dropdown question type selection menu\n      value: type,\n      onChange: e => {\n        setType(e.target.value);\n        handleChange(e.target.value, 'type');\n      },\n      className: \"dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Text\",\n        children: \"Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Number\",\n        children: \"Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Boolean\",\n        children: \"Boolean\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"MultipleChoice\",\n        children: \"Multiple Choice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this), type === 'MultipleChoice' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"radio\",\n          value: \"true\",\n          checked: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 36\n        }, this), \"test\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addChoice,\n        style: {\n          background: \"transparent\",\n          border: \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-icons\",\n          children: \"add_circle_outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => props.deleteQuestion(nanoid),\n      style: {\n        background: \"transparent\",\n        border: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-icons\",\n        children: \"delete_outline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 13\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 13\n  }, this)\n  /*\n      // Read mode\n      <div className=\"Question\">\n          <div className=\"question-header\">\n              <input\n                  type=\"text\"\n                  name=\"header\"\n                  value={header}\n                  placeholder={\"Header\"}\n                  onChange={(e) => setHeader(e.target.value)}/>\n          </div>\n          {\n              type == \"Text\" ?\n                  //Text type\n                  <div className=\"question-answer\">\n                      <input\n                          type=\"text\"\n                          name=\"answer\"\n                          value={responses.filter((res) => res.question === nanoid)}\n                          placeholder={\"Answer\"}\n                          onChange={(e) => setAnswerText(e.target.value)}/>\n                  </div>\n                  :\n                  type == \"Number\" ?\n                      //Number type\n                      <div className=\"question-answer\">\n                          <input\n                              type=\"text\"\n                              name=\"answer\"\n                              value={answerNumber}\n                              onChange={(e) => setAnswerNumber(e.target.value)}/>\n                      </div>\n                      :\n                      type == \"Boolean\" ?\n                          //Boolean type\n                          <div className=\"question-answer\">\n                              <div className=\"radio-wrapper\">\n                                  <label><input type=\"radio\" name=\"radio\" value=\"true\" checked={answerBoolean}/>true</label>\n                                  <label><input type=\"radio\" name=\"radio\" value=\"false\" checked={!answerBoolean}/>false</label>\n                              </div>\n                          </div>\n                          :\n                          type == \"MultipleChoice\" ?\n                              //MultipleChoice type\n                              <div className=\"question-answer\">\n                                  <div className=\"radio-wrapper\">\n                                   </div>\n                              </div>\n                              :\n                              null\n          }\n      </div>\n    */\n  ;\n}\n\n_s(Question, \"73Cn1assDBMcCyrfgKh/uW0agGE=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Question.js"],"names":["React","useState","useEffect","Question","props","editMode","setEditMode","type","setType","header","setHeader","mdate","setMDate","nanoid","setNanoid","questions","setQuestions","responses","setResponses","index","setIndex","handleChange","newValue","field","newQuestions","i","length","newQuestion","status","console","log","push","addChoice","e","target","value","background","border","deleteQuestion"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\n\nfunction Question(props) {\n    const [editMode, setEditMode] = useState(props.editMode);\n    const [type, setType] = useState(props.type);\n    const [header, setHeader] = useState(props.header);\n    const [mdate, setMDate] = useState(props.mdate);\n    const [nanoid, setNanoid] = useState(props.nanoid);\n    const [questions, setQuestions] = useState(props.questions);\n    const [responses, setResponses] = useState(props.responses);\n    const [index, setIndex] = useState(props.index);\n\n    useEffect(() => {\n        setEditMode(props.editMode);\n        setType(props.type);\n        setHeader(props.header);\n        setMDate(props.mdate);\n        setNanoid(props.nanoid);\n        setQuestions(props.questions);\n        setResponses(props.responses);\n        setIndex(props.index);\n    }, [props]);\n\n    useEffect(() => {\n        //console.log(responses);\n    }, [props.responses]);\n\n    const handleChange = (newValue, field) => {\n        let newQuestions = [];\n        for (let i = 0; i < questions.length; i++) {\n            if (questions[i].nanoid === nanoid) {\n                let newQuestion = {\n                    type: field === 'type' ? newValue : type,\n                    header: field === 'header' ? newValue : header,\n                    mdate: mdate,\n                    nanoid: nanoid,\n                    status: questions[i].status\n                }\n                console.log(newQuestion);\n                newQuestions.push(newQuestion);\n            }\n            else {\n                newQuestions.push(questions[i]);\n            }\n        }\n        props.setQuestions(newQuestions);\n        console.log(\"updated@\");\n    }\n\n    const addChoice = () => {\n\n    }\n\n    return (\n        editMode ?\n            //Edit mode\n            <div className=\"Question\">\n                <div className=\"question-header\">\n                    <input // question header\n                        type=\"text\"\n                        name=\"header\"\n                        value={header}\n                        placeholder={\"Header\"}\n                        onChange={(e) => {setHeader(e.target.value);handleChange(e.target.value, 'header');}}/>\n                </div>\n                <select // dropdown question type selection menu\n                    value={type}\n                    onChange={(e) => {setType(e.target.value);handleChange(e.target.value, 'type');}}\n                    className=\"dropdown\">\n                    <option value=\"Text\">Text</option>\n                    <option value=\"Number\">Number</option>\n                    <option value=\"Boolean\">Boolean</option>\n                    <option value=\"MultipleChoice\">Multiple Choice</option>\n                </select>\n                {\n                    type === 'MultipleChoice' ?\n                        <div className=\"wrapper\">\n                            <label><input type=\"radio\" name=\"radio\" value=\"true\" checked={false}/>test</label>\n                            <button onClick={addChoice} style={{background: \"transparent\", border: \"none\"}}>\n                                <span  className=\"material-icons\">add_circle_outline</span>\n                            </button>\n                        </div>\n                        :\n                        null\n                }\n                <button onClick={() => props.deleteQuestion(nanoid)} style={{background: \"transparent\", border: \"none\"}}>\n                    <span  className=\"material-icons\">delete_outline</span>\n                </button>\n            </div>\n            :\n            <div></div>\n        /*\n            // Read mode\n            <div className=\"Question\">\n                <div className=\"question-header\">\n                    <input\n                        type=\"text\"\n                        name=\"header\"\n                        value={header}\n                        placeholder={\"Header\"}\n                        onChange={(e) => setHeader(e.target.value)}/>\n                </div>\n                {\n                    type == \"Text\" ?\n                        //Text type\n                        <div className=\"question-answer\">\n                            <input\n                                type=\"text\"\n                                name=\"answer\"\n                                value={responses.filter((res) => res.question === nanoid)}\n                                placeholder={\"Answer\"}\n                                onChange={(e) => setAnswerText(e.target.value)}/>\n                        </div>\n                        :\n                        type == \"Number\" ?\n                            //Number type\n                            <div className=\"question-answer\">\n                                <input\n                                    type=\"text\"\n                                    name=\"answer\"\n                                    value={answerNumber}\n                                    onChange={(e) => setAnswerNumber(e.target.value)}/>\n                            </div>\n                            :\n                            type == \"Boolean\" ?\n                                //Boolean type\n                                <div className=\"question-answer\">\n                                    <div className=\"radio-wrapper\">\n                                        <label><input type=\"radio\" name=\"radio\" value=\"true\" checked={answerBoolean}/>true</label>\n                                        <label><input type=\"radio\" name=\"radio\" value=\"false\" checked={!answerBoolean}/>false</label>\n                                    </div>\n                                </div>\n                                :\n                                type == \"MultipleChoice\" ?\n                                    //MultipleChoice type\n                                    <div className=\"question-answer\">\n                                        <div className=\"radio-wrapper\">\n\n                                        </div>\n                                    </div>\n                                    :\n                                    null\n                }\n            </div>\n\n         */\n    );\n}\nexport default Question"]},"metadata":{},"sourceType":"module"}