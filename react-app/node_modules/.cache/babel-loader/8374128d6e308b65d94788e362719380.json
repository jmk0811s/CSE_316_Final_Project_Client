{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Daylog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Question from \"./Question\";\nimport { createDaylogAPIMethod, createQuestionAPIMethod, getCurrentUserAPIMethod, getDaylogsAPIMethod, getQuestionsByDaylogIdAPIMethod } from \"../api/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Daylog(props) {\n  _s();\n\n  const [daylogs, setDaylogs] = useState([]);\n  const [currDaylog, setCurrDaylog] = useState({});\n  const [currQuestions, setCurrQuestions] = useState([]);\n  const [currDate, setCurrDate] = useState();\n  const [currDaylogIndex, setCurrDayLogIndex] = useState();\n  useEffect(() => {\n    setDaylogs(props.daylogs);\n  }, [props.daylogs]);\n  useEffect(() => {\n    if (daylogs != undefined && daylogs.length != 0) {\n      setDaylogs(daylogs);\n      setCurrDaylog(daylogs[0]);\n      setCurrDate(dateToString(new Date(daylogs[0].date)));\n      setCurrDayLogIndex(0);\n      getQuestionsByDaylogIdAPIMethod(daylogs[0]._id).then(questions => {\n        setCurrQuestions(sortQuestionsByDate(questions));\n      });\n    }\n  }, [daylogs]);\n\n  const previous = () => {\n    if (currDaylogIndex + 1 < daylogs.length) {\n      setCurrDaylog(daylogs[currDaylogIndex + 1]);\n      setCurrDate(dateToString(new Date(daylogs[currDaylogIndex + 1].date)));\n      getQuestionsByDaylogIdAPIMethod(daylogs[currDaylogIndex + 1]._id).then(questions => {\n        setCurrQuestions(sortQuestionsByDate(questions));\n        setCurrDayLogIndex(currDaylogIndex + 1);\n      });\n    }\n  };\n\n  const next = () => {\n    if (currDaylogIndex - 1 >= 0) {\n      setCurrDaylog(daylogs[currDaylogIndex - 1]);\n      setCurrDate(dateToString(new Date(daylogs[currDaylogIndex - 1].date)));\n      getQuestionsByDaylogIdAPIMethod(daylogs[currDaylogIndex - 1]._id).then(questions => {\n        setCurrQuestions(sortQuestionsByDate(questions));\n        setCurrDayLogIndex(currDaylogIndex - 1);\n      });\n    }\n  };\n\n  const dateToString = date => {\n    return date.getFullYear() + \" / \" + (date.getMonth() + 1) + \" / \" + date.getDate();\n  };\n\n  const sortQuestionsByDate = list => {\n    return list.sort((a, b) => new Date(a.mdate) - new Date(b.mdate));\n  };\n\n  const test2 = () => {\n    let nDayLog = {\n      date: new Date(\"2019-10-15\"),\n      creator: \"61a8ec72b1b3f8f9fb27f94f\"\n    };\n    createDaylogAPIMethod(nDayLog).then(() => {});\n    getQuestionsByDaylogIdAPIMethod(\"61a8ec98b1b3f8f9fb27f95a\").then(questions => {\n      console.log(questions);\n    });\n  };\n\n  const populateQuestions = () => {\n    let questions = [{\n      type: 'Text',\n      header: 'Sample Question 1 (Text type)',\n      answer: {\n        text: 'Sample answer 1'\n      },\n      mdate: new Date(\"2021-12-01\"),\n      daylog: currDaylog._id\n    }, {\n      type: 'Number',\n      header: 'Sample Question 2 (Number type)',\n      answer: {\n        number: 2\n      },\n      mdate: new Date(\"2021-12-02\"),\n      daylog: currDaylog._id\n    }, {\n      type: 'Boolean',\n      header: 'Sample Question 3 (Boolean type)',\n      answer: {\n        boolean: true\n      },\n      mdate: new Date(\"2021-12-03\"),\n      daylog: currDaylog._id\n    }, {\n      type: 'MultipleChoice',\n      header: 'Sample Question 4 (MultipleChoice type)',\n      answer: {\n        boolean: true\n      },\n      mdate: new Date(\"2021-12-04\"),\n      daylog: currDaylog._id\n    }];\n\n    for (let i = 0; i < 4; i++) {\n      createQuestionAPIMethod(questions[i]).then(question => {\n        console.log(question + \" \" + (i + 1) + \" added.\");\n      });\n    }\n\n    setCurrQuestions(questions);\n  };\n\n  return currDate ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LogSelectionBar\",\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: previous,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: next,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currQuestions.length != 0 ? currQuestions.map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          listStyle: \"none\",\n          padding: \"5px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Question, {\n          type: question.type,\n          header: question.header,\n          answer: question.answer,\n          mdate: question.mdate,\n          date: currDate,\n          editMode: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 37\n      }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SubmitButton\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: populateQuestions,\n      children: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: test2,\n      children: \"test2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 17\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(Daylog, \"bk6bLI+vMS8lzxsUrF+rD6Av5Dk=\");\n\n_c = Daylog;\nexport default Daylog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Daylog\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Daylog.js"],"names":["React","useEffect","useState","Question","createDaylogAPIMethod","createQuestionAPIMethod","getCurrentUserAPIMethod","getDaylogsAPIMethod","getQuestionsByDaylogIdAPIMethod","Daylog","props","daylogs","setDaylogs","currDaylog","setCurrDaylog","currQuestions","setCurrQuestions","currDate","setCurrDate","currDaylogIndex","setCurrDayLogIndex","undefined","length","dateToString","Date","date","_id","then","questions","sortQuestionsByDate","previous","next","getFullYear","getMonth","getDate","list","sort","a","b","mdate","test2","nDayLog","creator","console","log","populateQuestions","type","header","answer","text","daylog","number","boolean","i","question","display","justifyContent","map","listStyle","padding"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SACIC,qBADJ,EAEIC,uBAFJ,EAGIC,uBAHJ,EAIIC,mBAJJ,EAKIC,+BALJ,QAMO,eANP;;;;AAQA,SAASC,MAAT,CAAgBC,KAAhB,EAAsB;AAAA;;AAClB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,EAAxC;AACA,QAAM,CAACiB,eAAD,EAAkBC,kBAAlB,IAAwClB,QAAQ,EAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,UAAU,CAACF,KAAK,CAACC,OAAP,CAAV;AACH,GAFQ,EAEN,CAACD,KAAK,CAACC,OAAP,CAFM,CAAT;AAIAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,OAAO,IAAIU,SAAX,IAAwBV,OAAO,CAACW,MAAR,IAAkB,CAA9C,EAAiD;AAC7CV,MAAAA,UAAU,CAACD,OAAD,CAAV;AACAG,MAAAA,aAAa,CAACH,OAAO,CAAC,CAAD,CAAR,CAAb;AACAO,MAAAA,WAAW,CAACK,YAAY,CAAC,IAAIC,IAAJ,CAASb,OAAO,CAAC,CAAD,CAAP,CAAWc,IAApB,CAAD,CAAb,CAAX;AACAL,MAAAA,kBAAkB,CAAC,CAAD,CAAlB;AACAZ,MAAAA,+BAA+B,CAACG,OAAO,CAAC,CAAD,CAAP,CAAWe,GAAZ,CAA/B,CAAgDC,IAAhD,CAAsDC,SAAD,IAAe;AAChEZ,QAAAA,gBAAgB,CAACa,mBAAmB,CAACD,SAAD,CAApB,CAAhB;AACH,OAFD;AAGH;AACJ,GAVQ,EAUN,CAACjB,OAAD,CAVM,CAAT;;AAYA,QAAMmB,QAAQ,GAAG,MAAK;AAClB,QAAGX,eAAe,GAAC,CAAhB,GAAoBR,OAAO,CAACW,MAA/B,EAAuC;AACnCR,MAAAA,aAAa,CAACH,OAAO,CAACQ,eAAe,GAAG,CAAnB,CAAR,CAAb;AACAD,MAAAA,WAAW,CAACK,YAAY,CAAC,IAAIC,IAAJ,CAASb,OAAO,CAACQ,eAAe,GAAG,CAAnB,CAAP,CAA6BM,IAAtC,CAAD,CAAb,CAAX;AAEAjB,MAAAA,+BAA+B,CAACG,OAAO,CAACQ,eAAe,GAAG,CAAnB,CAAP,CAA6BO,GAA9B,CAA/B,CAAkEC,IAAlE,CAAwEC,SAAD,IAAe;AAClFZ,QAAAA,gBAAgB,CAACa,mBAAmB,CAACD,SAAD,CAApB,CAAhB;AACAR,QAAAA,kBAAkB,CAACD,eAAe,GAAG,CAAnB,CAAlB;AACH,OAHD;AAIH;AACJ,GAVD;;AAWA,QAAMY,IAAI,GAAG,MAAK;AACd,QAAGZ,eAAe,GAAC,CAAhB,IAAqB,CAAxB,EAA2B;AACvBL,MAAAA,aAAa,CAACH,OAAO,CAACQ,eAAe,GAAC,CAAjB,CAAR,CAAb;AACAD,MAAAA,WAAW,CAACK,YAAY,CAAC,IAAIC,IAAJ,CAASb,OAAO,CAACQ,eAAe,GAAE,CAAlB,CAAP,CAA4BM,IAArC,CAAD,CAAb,CAAX;AAEAjB,MAAAA,+BAA+B,CAACG,OAAO,CAACQ,eAAe,GAAC,CAAjB,CAAP,CAA2BO,GAA5B,CAA/B,CAAgEC,IAAhE,CAAsEC,SAAD,IAAe;AAChFZ,QAAAA,gBAAgB,CAACa,mBAAmB,CAACD,SAAD,CAApB,CAAhB;AACAR,QAAAA,kBAAkB,CAACD,eAAe,GAAC,CAAjB,CAAlB;AACH,OAHD;AAIH;AAEJ,GAXD;;AAaA,QAAMI,YAAY,GAAIE,IAAD,IAAU;AAC3B,WAAOA,IAAI,CAACO,WAAL,KAAqB,KAArB,IAA8BP,IAAI,CAACQ,QAAL,KAAkB,CAAhD,IAAqD,KAArD,GAA6DR,IAAI,CAACS,OAAL,EAApE;AACH,GAFD;;AAIA,QAAML,mBAAmB,GAAIM,IAAD,IAAU;AAClC,WAAOA,IAAI,CAACC,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU,IAAId,IAAJ,CAASa,CAAC,CAACE,KAAX,IAAoB,IAAIf,IAAJ,CAASc,CAAC,CAACC,KAAX,CAAxC,CAAP;AACH,GAFD;;AAGA,QAAMC,KAAK,GAAG,MAAM;AAChB,QAAIC,OAAO,GAAG;AACVhB,MAAAA,IAAI,EAAE,IAAID,IAAJ,CAAS,YAAT,CADI;AAEVkB,MAAAA,OAAO,EAAE;AAFC,KAAd;AAIAtC,IAAAA,qBAAqB,CAACqC,OAAD,CAArB,CAA+Bd,IAA/B,CAAoC,MAAI,CAEvC,CAFD;AAGAnB,IAAAA,+BAA+B,CAAC,0BAAD,CAA/B,CAA4DmB,IAA5D,CAAkEC,SAAD,IAAa;AAC1Ee,MAAAA,OAAO,CAACC,GAAR,CAAYhB,SAAZ;AACH,KAFD;AAGH,GAXD;;AAYA,QAAMiB,iBAAiB,GAAG,MAAM;AAC5B,QAAIjB,SAAS,GAAG,CACZ;AACIkB,MAAAA,IAAI,EAAE,MADV;AAEIC,MAAAA,MAAM,EAAE,+BAFZ;AAGIC,MAAAA,MAAM,EAAE;AACJC,QAAAA,IAAI,EAAE;AADF,OAHZ;AAMIV,MAAAA,KAAK,EAAE,IAAIf,IAAJ,CAAS,YAAT,CANX;AAOI0B,MAAAA,MAAM,EAAErC,UAAU,CAACa;AAPvB,KADY,EAUZ;AACIoB,MAAAA,IAAI,EAAE,QADV;AAEIC,MAAAA,MAAM,EAAE,iCAFZ;AAGIC,MAAAA,MAAM,EAAE;AACJG,QAAAA,MAAM,EAAE;AADJ,OAHZ;AAMIZ,MAAAA,KAAK,EAAE,IAAIf,IAAJ,CAAS,YAAT,CANX;AAOI0B,MAAAA,MAAM,EAAErC,UAAU,CAACa;AAPvB,KAVY,EAmBZ;AACIoB,MAAAA,IAAI,EAAE,SADV;AAEIC,MAAAA,MAAM,EAAE,kCAFZ;AAGIC,MAAAA,MAAM,EAAE;AACJI,QAAAA,OAAO,EAAE;AADL,OAHZ;AAMIb,MAAAA,KAAK,EAAE,IAAIf,IAAJ,CAAS,YAAT,CANX;AAOI0B,MAAAA,MAAM,EAAErC,UAAU,CAACa;AAPvB,KAnBY,EA4BZ;AACIoB,MAAAA,IAAI,EAAE,gBADV;AAEIC,MAAAA,MAAM,EAAE,yCAFZ;AAGIC,MAAAA,MAAM,EAAE;AACJI,QAAAA,OAAO,EAAE;AADL,OAHZ;AAMIb,MAAAA,KAAK,EAAE,IAAIf,IAAJ,CAAS,YAAT,CANX;AAOI0B,MAAAA,MAAM,EAAErC,UAAU,CAACa;AAPvB,KA5BY,CAAhB;;AAuCA,SAAK,IAAI2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBhD,MAAAA,uBAAuB,CAACuB,SAAS,CAACyB,CAAD,CAAV,CAAvB,CAAsC1B,IAAtC,CAA4C2B,QAAD,IAAc;AACrDX,QAAAA,OAAO,CAACC,GAAR,CAAYU,QAAQ,GAAG,GAAX,IAAkBD,CAAC,GAAG,CAAtB,IAA2B,SAAvC;AACH,OAFD;AAGH;;AACDrC,IAAAA,gBAAgB,CAACY,SAAD,CAAhB;AACH,GA9CD;;AAgDA,SACIX,QAAQ,gBACA;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAiC,MAAA,KAAK,EAAE;AAACsC,QAAAA,OAAO,EAAE,MAAV;AAAkBC,QAAAA,cAAc,EAAE;AAAlC,OAAxC;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAE1B,QAAjB;AAAA,+BACI;AAAA,oBAAK;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAA,kBACKb;AADL;AAAA;AAAA;AAAA;AAAA,cAJJ,eAOI;AAAQ,QAAA,OAAO,EAAEc,IAAjB;AAAA,+BACI;AAAA,oBAAK;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAYI;AAAA,gBAEQhB,aAAa,CAACO,MAAd,IAAwB,CAAxB,GACKP,aAAa,CAAC0C,GAAd,CAAmBH,QAAD,iBACf;AAAI,QAAA,KAAK,EAAE;AAACI,UAAAA,SAAS,EAAE,MAAZ;AAAmBC,UAAAA,OAAO,EAAE;AAA5B,SAAX;AAAA,+BACI,QAAC,QAAD;AACI,UAAA,IAAI,EAAIL,QAAQ,CAACR,IADrB;AAEI,UAAA,MAAM,EAAIQ,QAAQ,CAACP,MAFvB;AAGI,UAAA,MAAM,EAAIO,QAAQ,CAACN,MAHvB;AAII,UAAA,KAAK,EAAIM,QAAQ,CAACf,KAJtB;AAKI,UAAA,IAAI,EAAItB,QALZ;AAMI,UAAA,QAAQ,EAAI;AANhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADH,CADL,gBAcI;AAhBZ;AAAA;AAAA;AAAA;AAAA,YAZJ,eA+BI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YA/BJ,eAmCI;AAAQ,MAAA,OAAO,EAAE4B,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnCJ,eAsCI;AAAQ,MAAA,OAAO,EAAEL,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,gBA6CA,qCA9CZ;AAgDH;;GAlKQ/B,M;;KAAAA,M;AAmKT,eAAeA,MAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport Question from \"./Question\";\nimport {\n    createDaylogAPIMethod,\n    createQuestionAPIMethod,\n    getCurrentUserAPIMethod,\n    getDaylogsAPIMethod,\n    getQuestionsByDaylogIdAPIMethod\n} from \"../api/client\";\n\nfunction Daylog(props){\n    const [daylogs, setDaylogs] = useState([]);\n    const [currDaylog, setCurrDaylog] = useState({});\n    const [currQuestions, setCurrQuestions] = useState([]);\n    const [currDate, setCurrDate] = useState();\n    const [currDaylogIndex, setCurrDayLogIndex] = useState();\n\n    useEffect(() => {\n        setDaylogs(props.daylogs);\n    }, [props.daylogs]);\n\n    useEffect(() => {\n        if (daylogs != undefined && daylogs.length != 0) {\n            setDaylogs(daylogs);\n            setCurrDaylog(daylogs[0]);\n            setCurrDate(dateToString(new Date(daylogs[0].date)));\n            setCurrDayLogIndex(0);\n            getQuestionsByDaylogIdAPIMethod(daylogs[0]._id).then((questions) => {\n                setCurrQuestions(sortQuestionsByDate(questions));\n            });\n        }\n    }, [daylogs]);\n\n    const previous = () =>{\n        if(currDaylogIndex+1 < daylogs.length) {\n            setCurrDaylog(daylogs[currDaylogIndex + 1]);\n            setCurrDate(dateToString(new Date(daylogs[currDaylogIndex + 1].date)));\n\n            getQuestionsByDaylogIdAPIMethod(daylogs[currDaylogIndex + 1]._id).then((questions) => {\n                setCurrQuestions(sortQuestionsByDate(questions));\n                setCurrDayLogIndex(currDaylogIndex + 1);\n            });\n        }\n    }\n    const next = () =>{\n        if(currDaylogIndex-1 >= 0) {\n            setCurrDaylog(daylogs[currDaylogIndex-1]);\n            setCurrDate(dateToString(new Date(daylogs[currDaylogIndex -1].date)));\n\n            getQuestionsByDaylogIdAPIMethod(daylogs[currDaylogIndex-1]._id).then((questions) => {\n                setCurrQuestions(sortQuestionsByDate(questions));\n                setCurrDayLogIndex(currDaylogIndex-1);\n            });\n        }\n\n    }\n\n    const dateToString = (date) => {\n        return date.getFullYear() + \" / \" + (date.getMonth() + 1) + \" / \" + date.getDate();\n    }\n\n    const sortQuestionsByDate = (list) => {\n        return list.sort((a, b) => new Date(a.mdate) - new Date(b.mdate));\n    }\n    const test2 = () => {\n        let nDayLog = {\n            date: new Date(\"2019-10-15\"),\n            creator: \"61a8ec72b1b3f8f9fb27f94f\"\n        }\n        createDaylogAPIMethod(nDayLog).then(()=>{\n\n        })\n        getQuestionsByDaylogIdAPIMethod(\"61a8ec98b1b3f8f9fb27f95a\").then((questions)=>{\n            console.log(questions);\n        })\n    }\n    const populateQuestions = () => {\n        let questions = [\n            {\n                type: 'Text',\n                header: 'Sample Question 1 (Text type)',\n                answer: {\n                    text: 'Sample answer 1'\n                },\n                mdate: new Date(\"2021-12-01\"),\n                daylog: currDaylog._id\n            },\n            {\n                type: 'Number',\n                header: 'Sample Question 2 (Number type)',\n                answer: {\n                    number: 2\n                },\n                mdate: new Date(\"2021-12-02\"),\n                daylog: currDaylog._id\n            },\n            {\n                type: 'Boolean',\n                header: 'Sample Question 3 (Boolean type)',\n                answer: {\n                    boolean: true\n                },\n                mdate: new Date(\"2021-12-03\"),\n                daylog: currDaylog._id\n            },\n            {\n                type: 'MultipleChoice',\n                header: 'Sample Question 4 (MultipleChoice type)',\n                answer: {\n                    boolean: true\n                },\n                mdate: new Date(\"2021-12-04\"),\n                daylog: currDaylog._id\n            }\n        ];\n\n        for (let i = 0; i < 4; i++) {\n            createQuestionAPIMethod(questions[i]).then((question) => {\n                console.log(question + \" \" + (i + 1) + \" added.\");\n            });\n        }\n        setCurrQuestions(questions);\n    }\n\n    return (\n        currDate? (\n                <div>\n                    <div className=\"LogSelectionBar\" style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <button onClick={previous}>\n                            <h2>{\"<\"}</h2>\n                        </button>\n                        <h2>\n                            {currDate}\n                        </h2>\n                        <button onClick={next}>\n                            <h2>{\">\"}</h2>\n                        </button>\n                    </div>\n                    <div>\n                        {\n                            currQuestions.length != 0 ?\n                                (currQuestions.map((question) =>\n                                    <li style={{listStyle: \"none\",padding: \"5px\"}}>\n                                        <Question\n                                            type = {question.type}\n                                            header = {question.header}\n                                            answer = {question.answer}\n                                            mdate = {question.mdate}\n                                            date = {currDate}\n                                            editMode = {false}\n                                        />\n                                    </li>\n                                ))\n                                :\n                                <></>\n                        }\n                    </div>\n                    <div className=\"SubmitButton\" >\n                        <button>Submit</button>\n                    </div>\n\n                    <button onClick={populateQuestions}>\n                        test\n                    </button>\n                    <button onClick={test2}>\n                        test2\n                    </button>\n\n\n                </div>):\n                <></>\n    );\n}\nexport default Daylog\n"]},"metadata":{},"sourceType":"module"}