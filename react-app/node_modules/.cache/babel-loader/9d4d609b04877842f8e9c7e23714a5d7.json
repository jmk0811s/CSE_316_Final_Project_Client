{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Question(props) {\n  _s();\n\n  const [editMode, setEditMode] = useState(props.editMode);\n  const [type, setType] = useState(props.type);\n  const [header, setHeader] = useState(props.header);\n  const [choices, setChoices] = useState(props.choices);\n  const [mdate, setMDate] = useState(props.mdate);\n  const [nanoId, setNanoId] = useState(props.nanoid);\n  const [questions, setQuestions] = useState(props.questions);\n  const [responses, setResponses] = useState(props.responses);\n  const [currResponse, setCurrResponse] = useState();\n  const [questionId, setQuestionId] = useState(props.questionId);\n  const [date, setDate] = useState(props.date);\n  useEffect(() => {\n    setDate(props.date);\n    setEditMode(props.editMode);\n    setType(props.type);\n    setChoices(props.choices);\n    setHeader(props.header);\n    setMDate(props.mdate);\n    setNanoId(props.nanoid);\n    setQuestions(props.questions);\n    setResponses(props.responses);\n    setQuestionId(props.questionId);\n  }, [props]);\n  useEffect(() => {\n    console.log(date);\n  }, [date]);\n  useEffect(() => {\n    //console.log(responses.length !== 0 && responses[0].question === questionId);\n    //console.log(responses.length !== 0 ? responses[0].date : 0);\n    //console.log(props.date);\n    let res = responses.filter(res => res.question === questionId && (res.date === date || res.date.toString().split('T')[0] === props.date.toISOString().split('T')[0]));\n    setCurrResponse(res);\n  }, [responses, props.date]);\n\n  const updateQuestions = (newValue, field) => {\n    let newQuestions = [];\n\n    for (let i = 0; i < questions.length; i++) {\n      if (questions[i].nanoid === nanoId) {\n        let newQuestion = {\n          type: field === 'type' ? newValue : type,\n          header: field === 'header' ? newValue : header,\n          choices: field === 'multiple_choice' ? newValue : choices,\n          mdate: mdate,\n          nanoid: nanoId,\n          status: questions[i].status\n        };\n        console.log(newQuestion);\n        newQuestions.push(newQuestion);\n      } else {\n        newQuestions.push(questions[i]);\n      }\n    }\n\n    props.setQuestions(newQuestions); //console.log(\"updated@\");\n  };\n\n  const updateChoice = (e, index) => {\n    let newChoices = [];\n\n    for (let i = 0; i < 3; i++) {\n      if (index == i) {\n        newChoices[i] = e.target.value;\n      } else {\n        newChoices.push(choices[i]);\n      }\n    }\n\n    updateQuestions(newChoices, 'multiple_choice');\n  };\n\n  const updateResponse = (res, type, index) => {\n    //console.log(\"res\");\n    //console.log(res);\n    //console.log(index);\n    let newChoiceList = [];\n\n    if (type === 'MultipleChoice') {\n      for (let i = 0; i < choices.length; i++) {\n        if (index === i) {\n          newChoiceList.push(true);\n        } else {\n          newChoiceList.push(false);\n        }\n      }\n    }\n\n    let oldResponse = currResponse[0];\n    console.log(\"oldResponse\");\n    console.log(oldResponse);\n    let id = nanoid();\n    let newResponse = {\n      response: {\n        text: type === 'Text' ? res += \"\" : '',\n        number: type === 'Number' ? res *= 1 : null,\n        boolean: type === 'Boolean' ? JSON.parse(res) : null,\n        multiple_choice: type === 'MultipleChoice' ? newChoiceList : []\n      },\n      date: date,\n      nanoid: id,\n      question: questionId,\n      status: ''\n    };\n    let newResponses = [];\n\n    if (oldResponse === undefined) {\n      // If there is no response, create a new one\n      console.log(\"res added\");\n      newResponse.status = 'ADDED';\n\n      for (let i = 0; i < responses.length; i++) {\n        newResponses.push(responses[i]);\n      }\n\n      newResponses.push(newResponse);\n      props.setResponses(newResponses);\n    } else {\n      // If there is a response, update it\n      console.log(\"res NOT added but updated\");\n\n      for (let i = 0; i < responses.length; i++) {\n        if (responses[i] === oldResponse) {\n          //console.log(\"new\");\n          //console.log(newResponse);\n          newResponses.push(newResponse);\n        } else {\n          newResponses.push(responses[i]);\n        }\n      } //console.log(\"@@@newResponses\");\n      //console.log(newResponses);\n\n\n      props.setResponses(newResponses);\n    }\n\n    console.log(newResponses);\n  };\n\n  return editMode ?\n  /*#__PURE__*/\n  //Edit mode\n  _jsxDEV(\"div\", {\n    className: \"Question\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-header\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        // question header\n        type: \"text\",\n        name: \"header\",\n        value: header,\n        placeholder: \"Header\",\n        onChange: e => {\n          setHeader(e.target.value);\n          updateQuestions(e.target.value, 'header');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      // dropdown question type selection menu\n      value: type,\n      onChange: e => {\n        setType(e.target.value);\n        updateQuestions(e.target.value, 'type');\n      },\n      className: \"dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Text\",\n        children: \"Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Number\",\n        children: \"Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Boolean\",\n        children: \"Boolean\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"MultipleChoice\",\n        children: \"Multiple Choice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: type === 'MultipleChoice' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-wrapper1\",\n        style: {\n          margin: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"radio-wrapper2\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"radio-wrapper3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: \"radio\",\n                value: \"true\",\n                checked: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 48\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"text\",\n                value: choices[0],\n                placeholder: \"new choice\",\n                onChange: e => updateChoice(e, 0)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"radio-wrapper3\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: \"radio\",\n                  value: \"true\",\n                  checked: false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 52\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"text\",\n                  value: choices[1],\n                  placeholder: \"new choice\",\n                  onChange: e => updateChoice(e, 1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"radio-wrapper3\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  name: \"radio\",\n                  value: \"true\",\n                  checked: false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 52\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"text\",\n                  value: choices[2],\n                  placeholder: \"new choice\",\n                  onChange: e => updateChoice(e, 2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => props.deleteQuestion(nanoId),\n      style: {\n        background: \"transparent\",\n        border: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-icons\",\n        children: \"delete_outline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 13\n  }, this) :\n  /*#__PURE__*/\n  // Answer mode\n  _jsxDEV(\"div\", {\n    className: \"Question\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-header\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"header\",\n        value: header,\n        placeholder: \"Header\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }, this), type == \"Text\" ?\n    /*#__PURE__*/\n    //Text type\n    _jsxDEV(\"div\", {\n      className: \"question-response\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"answer\",\n        value: currResponse !== undefined && currResponse.length !== 0 ? currResponse[0].response.text : '',\n        placeholder: \"Response\",\n        onChange: e => updateResponse(e.target.value, 'Text')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 25\n    }, this) : type == \"Number\" ?\n    /*#__PURE__*/\n    //Number type\n    _jsxDEV(\"div\", {\n      className: \"question-response\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"answer\",\n        value: currResponse !== undefined && currResponse.length !== 0 ? currResponse[0].response.number : '',\n        placeholder: \"Response\",\n        onChange: e => updateResponse(e.target.value, 'Number')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 29\n    }, this) : type == \"Boolean\" ?\n    /*#__PURE__*/\n    //Boolean type\n    _jsxDEV(\"div\", {\n      className: \"question-response\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: nanoId,\n            value: \"true\",\n            checked: currResponse !== undefined && currResponse.length !== 0 && currResponse[0].response.boolean ? currResponse[0].response.boolean : null,\n            onChange: e => updateResponse(e.target.value, 'Boolean')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 48\n          }, this), \"true\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: nanoId,\n            value: \"false\",\n            checked: currResponse !== undefined && currResponse.length !== 0 && !currResponse[0].response.boolean ? !currResponse[0].response.boolean : null,\n            onChange: e => updateResponse(e.target.value, 'Boolean')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 48\n          }, this), \"false\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 33\n    }, this) : type == \"MultipleChoice\" ?\n    /*#__PURE__*/\n    //MultipleChoice type\n    _jsxDEV(\"div\", {\n      className: \"radio-wrapper1\",\n      style: {\n        margin: \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-wrapper2\",\n        children: choices.map((choice, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"radio-wrapper3\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: nanoId,\n              value: \"true\",\n              checked: currResponse !== undefined && currResponse.length !== 0 && currResponse[0].response.multiple_choice ? currResponse[0].response.multiple_choice[i] : null,\n              onChange: e => updateResponse(e.target.value, 'MultipleChoice', i)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 64\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"text\",\n              value: choice,\n              placeholder: \"new choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 61\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 57\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 53\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 37\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Question, \"LYPFxyfj7IpkdacJzmHRyvuinoY=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Question.js"],"names":["React","useState","useEffect","nanoid","Question","props","editMode","setEditMode","type","setType","header","setHeader","choices","setChoices","mdate","setMDate","nanoId","setNanoId","questions","setQuestions","responses","setResponses","currResponse","setCurrResponse","questionId","setQuestionId","date","setDate","console","log","res","filter","question","toString","split","toISOString","updateQuestions","newValue","field","newQuestions","i","length","newQuestion","status","push","updateChoice","e","index","newChoices","target","value","updateResponse","newChoiceList","oldResponse","id","newResponse","response","text","number","boolean","JSON","parse","multiple_choice","newResponses","undefined","margin","deleteQuestion","background","border","map","choice"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {nanoid} from 'nanoid';\n\nfunction Question(props) {\n    const [editMode, setEditMode] = useState(props.editMode);\n    const [type, setType] = useState(props.type);\n    const [header, setHeader] = useState(props.header);\n    const [choices, setChoices] = useState(props.choices);\n    const [mdate, setMDate] = useState(props.mdate);\n    const [nanoId, setNanoId] = useState(props.nanoid);\n    const [questions, setQuestions] = useState(props.questions);\n    const [responses, setResponses] = useState(props.responses);\n    const [currResponse, setCurrResponse] = useState();\n    const [questionId, setQuestionId] = useState(props.questionId);\n    const [date, setDate] = useState(props.date);\n\n    useEffect(() => {\n        setDate(props.date);\n        setEditMode(props.editMode);\n        setType(props.type);\n        setChoices(props.choices);\n        setHeader(props.header);\n        setMDate(props.mdate);\n        setNanoId(props.nanoid);\n        setQuestions(props.questions);\n        setResponses(props.responses);\n        setQuestionId(props.questionId);\n    }, [props]);\n\n    useEffect(() => {\n        console.log(date);\n    }, [date]);\n\n    useEffect(() => {\n        //console.log(responses.length !== 0 && responses[0].question === questionId);\n        //console.log(responses.length !== 0 ? responses[0].date : 0);\n        //console.log(props.date);\n        let res = responses.filter((res) =>\n            res.question === questionId &&\n            (\n                res.date === date\n                ||\n                res.date.toString().split('T')[0] === props.date.toISOString().split('T')[0]\n            )\n        )\n        setCurrResponse(res);\n    }, [responses, props.date]);\n\n    const updateQuestions = (newValue, field) => {\n        let newQuestions = [];\n        for (let i = 0; i < questions.length; i++) {\n            if (questions[i].nanoid === nanoId) {\n                let newQuestion = {\n                    type: field === 'type' ? newValue : type,\n                    header: field === 'header' ? newValue : header,\n                    choices: field === 'multiple_choice' ? newValue : choices,\n                    mdate: mdate,\n                    nanoid: nanoId,\n                    status: questions[i].status\n                }\n                console.log(newQuestion);\n                newQuestions.push(newQuestion);\n            }\n            else {\n                newQuestions.push(questions[i]);\n            }\n        }\n        props.setQuestions(newQuestions);\n        //console.log(\"updated@\");\n    }\n\n    const updateChoice = (e, index) => {\n        let newChoices = [];\n        for (let i = 0; i < 3; i++) {\n            if (index == i) {\n                newChoices[i] = e.target.value;\n            }\n            else {\n                newChoices.push(choices[i]);\n            }\n        }\n        updateQuestions(newChoices, 'multiple_choice');\n    }\n\n    const updateResponse = (res, type, index) => {\n        //console.log(\"res\");\n        //console.log(res);\n        //console.log(index);\n        let newChoiceList = [];\n        if (type === 'MultipleChoice') {\n            for (let i = 0; i < choices.length; i++) {\n                if (index === i) {\n                    newChoiceList.push(true);\n                }\n                else {\n                    newChoiceList.push(false);\n                }\n            }\n        }\n\n        let oldResponse = currResponse[0];\n        console.log(\"oldResponse\");\n        console.log(oldResponse);\n        let id = nanoid();\n        let newResponse = {\n            response: {\n                text: type === 'Text' ? res+=\"\" : '',\n                number: type === 'Number' ? res*=1 : null,\n                boolean: type === 'Boolean' ? JSON.parse(res) : null,\n                multiple_choice: type === 'MultipleChoice' ? newChoiceList : []\n            },\n            date: date,\n            nanoid: id,\n            question: questionId,\n            status: ''\n        }\n        let newResponses = [];\n        if (oldResponse === undefined) { // If there is no response, create a new one\n            console.log(\"res added\");\n            newResponse.status = 'ADDED';\n            for (let i = 0; i < responses.length; i++) {\n                newResponses.push(responses[i]);\n            }\n            newResponses.push(newResponse);\n            props.setResponses(newResponses);\n        }\n        else { // If there is a response, update it\n            console.log(\"res NOT added but updated\");\n            for (let i = 0; i < responses.length; i++) {\n                if (responses[i] === oldResponse) {\n                    //console.log(\"new\");\n                    //console.log(newResponse);\n                    newResponses.push(newResponse);\n                }\n                else {\n                    newResponses.push(responses[i]);\n                }\n            }\n            //console.log(\"@@@newResponses\");\n            //console.log(newResponses);\n            props.setResponses(newResponses);\n        }\n        console.log(newResponses);\n    }\n\n    return (\n        editMode ?\n            //Edit mode\n            <div className=\"Question\">\n                <div className=\"question-header\">\n                    <input // question header\n                        type=\"text\"\n                        name=\"header\"\n                        value={header}\n                        placeholder={\"Header\"}\n                        onChange={(e) => {setHeader(e.target.value);updateQuestions(e.target.value, 'header');}}/>\n                </div>\n                <select // dropdown question type selection menu\n                    value={type}\n                    onChange={(e) => {setType(e.target.value);updateQuestions(e.target.value, 'type');}}\n                    className=\"dropdown\">\n                    <option value=\"Text\">Text</option>\n                    <option value=\"Number\">Number</option>\n                    <option value=\"Boolean\">Boolean</option>\n                    <option value=\"MultipleChoice\">Multiple Choice</option>\n                </select>\n                <div>\n                    {\n                        type === 'MultipleChoice' ?\n                            <div className=\"radio-wrapper1\" style={{margin:\"10px\"}}>\n                                <div className=\"radio-wrapper2\">\n                                    <div className=\"radio-wrapper3\">\n                                        <label><input type=\"radio\" name=\"radio\" value=\"true\" checked={false}/>\n                                            <input type=\"text\" name=\"text\" value={choices[0]} placeholder=\"new choice\" onChange={(e) => updateChoice(e, 0)}/>\n                                        </label>\n                                        <div className=\"radio-wrapper3\">\n                                            <label><input type=\"radio\" name=\"radio\" value=\"true\" checked={false}/>\n                                                <input type=\"text\" name=\"text\" value={choices[1]} placeholder=\"new choice\" onChange={(e) => updateChoice(e, 1)}/>\n                                            </label>\n                                        </div>\n                                        <div className=\"radio-wrapper3\">\n                                            <label><input type=\"radio\" name=\"radio\" value=\"true\" checked={false}/>\n                                                <input type=\"text\" name=\"text\" value={choices[2]} placeholder=\"new choice\" onChange={(e) => updateChoice(e, 2)}/>\n                                            </label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            :\n                            null\n                    }\n                </div>\n\n                <button onClick={() => props.deleteQuestion(nanoId)} style={{background: \"transparent\", border: \"none\"}}>\n                    <span  className=\"material-icons\">delete_outline</span>\n                </button>\n            </div>\n            :\n            // Answer mode\n            <div className=\"Question\">\n                <div className=\"question-header\">\n                    <input\n                        type=\"text\"\n                        name=\"header\"\n                        value={header}\n                        placeholder={\"Header\"}\n                    />\n                </div>\n                {\n                    type == \"Text\" ?\n                        //Text type\n                        <div className=\"question-response\">\n                            <input\n                                type=\"text\"\n                                name=\"answer\"\n                                value={currResponse !== undefined && currResponse.length !== 0 ? currResponse[0].response.text : ''}\n                                placeholder={\"Response\"}\n                                onChange={(e) => updateResponse(e.target.value, 'Text')}\n                            />\n                        </div>\n                        :\n                        type == \"Number\" ?\n                            //Number type\n                            <div className=\"question-response\">\n                                <input\n                                    type=\"number\"\n                                    name=\"answer\"\n                                    value={currResponse !== undefined && currResponse.length !== 0 ? currResponse[0].response.number : ''}\n                                    placeholder={\"Response\"}\n                                    onChange={(e) => updateResponse(e.target.value, 'Number')}\n                                />\n                            </div>\n                            :\n                            type == \"Boolean\" ?\n                                //Boolean type\n                                <div className=\"question-response\">\n                                    <div className=\"radio-wrapper\">\n                                        <label><input\n                                            type=\"radio\"\n                                            name={nanoId}\n                                            value=\"true\"\n                                            checked={currResponse !== undefined && currResponse.length !== 0 && currResponse[0].response.boolean ? currResponse[0].response.boolean : null}\n                                            onChange={(e) => updateResponse(e.target.value, 'Boolean')}\n                                        />true</label>\n                                        <label><input\n                                            type=\"radio\"\n                                            name={nanoId}\n                                            value=\"false\"\n                                            checked={currResponse !== undefined && currResponse.length !== 0 && !currResponse[0].response.boolean ? !currResponse[0].response.boolean : null}\n                                            onChange={(e) => updateResponse(e.target.value, 'Boolean')}\n                                        />false</label>\n                                    </div>\n                                </div>\n                                :\n                                type == \"MultipleChoice\" ?\n                                    //MultipleChoice type\n                                    <div className=\"radio-wrapper1\" style={{margin:\"10px\"}}>\n                                        <div className=\"radio-wrapper2\">\n                                            {\n                                                choices.map((choice, i) =>\n                                                    <div className=\"radio-wrapper3\">\n                                                        <label><input\n                                                            type=\"radio\"\n                                                            name={nanoId}\n                                                            value=\"true\"\n                                                            checked={currResponse !== undefined && currResponse.length !== 0 && currResponse[0].response.multiple_choice ? currResponse[0].response.multiple_choice[i] : null}\n                                                            onChange={(e) => updateResponse(e.target.value, 'MultipleChoice', i)}\n                                                        />\n                                                            <input type=\"text\" name=\"text\" value={choice} placeholder=\"new choice\"/>\n                                                        </label>\n                                                    </div>\n                                                )\n                                            }\n                                        </div>\n                                    </div>\n                                    :\n                                    null\n                }\n            </div>\n    );\n}\nexport default Question"]},"metadata":{},"sourceType":"module"}