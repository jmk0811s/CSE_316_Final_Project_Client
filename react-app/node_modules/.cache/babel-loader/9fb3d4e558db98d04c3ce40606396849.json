{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/EditQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Question from \"./Question\";\nimport { nanoid } from 'nanoid';\nimport { sortByDate } from \"../utils/HelperFunctions\";\nimport { createQuestionAPIMethod, deleteQuestionByIdAPIMethod, getQuestionsAPIMethod, updateQuestionAPIMethod, deleteResponseByIdAPIMethod, getResponsesAPIMethod } from \"../api/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction EditQuestions(props) {\n  _s();\n\n  const [dbQuestions, setDBQuestions] = useState([]);\n  const [questions, setQuestions] = useState(props.questions);\n  const [responses, setResponses] = useState(props.responses);\n  useEffect(() => {\n    getQuestionsAPIMethod().then(questions => {\n      setDBQuestions(questions);\n      setQuestions(questions);\n    });\n    getResponsesAPIMethod().then(responses => {\n      setResponses(responses);\n    });\n  }, []);\n\n  const handleSubmit = () => {\n    console.log(\"DB questions: \");\n    console.log(dbQuestions);\n    console.log(\"local questions: \");\n    console.log(questions);\n\n    for (let i = 0; i < questions.length; i++) {\n      if (questions[i].status === 'ADDED') {\n        console.log(\"ADDED\");\n        questions[i].status = '';\n        createQuestionAPIMethod(questions[i]);\n      }\n\n      for (let j = 0; j < dbQuestions.length; j++) {\n        if (dbQuestions[j].nanoid === questions[i].nanoid) {\n          if (questions[i].status === 'DELETED' && dbQuestions[j]._id !== undefined) {\n            console.log(\"DELETED\");\n            deleteQuestionByIdAPIMethod(dbQuestions[j]._id);\n\n            for (let k = 0; k < responses.length; k++) {\n              if (responses[k].question === dbQuestions[j]._id) {\n                console.log(\"res deleted@@@@@\");\n                deleteResponseByIdAPIMethod(responses[k]._id);\n              }\n            }\n          } else {\n            console.log(\"UPDATED\");\n            let newQuestion = {\n              _id: questions[i]._id,\n              type: questions[i].type,\n              header: questions[i].header,\n              choices: questions[i].choices,\n              mdate: questions[i].mdate,\n              nanoid: questions[i].nanoid,\n              creator: questions[i].creator\n            };\n            updateQuestionAPIMethod(newQuestion);\n          }\n        }\n      }\n    }\n\n    let newQuestions = questions.filter(question => question.status !== 'DELETED');\n    props.setQuestions(sortByDate(newQuestions));\n    console.log(\"submit completed\");\n    console.log(newQuestions);\n  };\n\n  const addQuestion = () => {\n    let id = nanoid();\n    let newQuestion = {\n      type: 'Text',\n      header: '',\n      choices: [],\n      mdate: new Date(),\n      nanoid: id,\n      status: 'ADDED'\n    };\n    let newQuestions = [];\n\n    for (let i = 0; i < questions.length; i++) {\n      newQuestions.push(questions[i]);\n    }\n\n    newQuestions.push(newQuestion);\n    setQuestions(newQuestions);\n    console.log(\"question added - edit questions page\");\n    console.log(newQuestions);\n  };\n\n  const deleteQuestion = nanoid => {\n    let newQuestions = [];\n\n    for (let i = 0; i < questions.length; i++) {\n      newQuestions.push(questions[i]);\n\n      if (questions[i].nanoid === nanoid) {\n        questions[i].status = 'DELETED';\n        newQuestions.push(questions[i]);\n      }\n    }\n\n    setQuestions(newQuestions);\n    console.log(\"question deleted - edit questions page\");\n    console.log(newQuestions);\n  };\n\n  const updateQuestion = (newValue, field, index) => {\n    let newQuestions = [];\n    console.log(questions);\n\n    for (let i = 0; i < questions.length; i++) {\n      newQuestions.push(questions[i]);\n    }\n\n    if (field === 'type') {\n      newQuestions[index].type = newValue;\n    } else if (field === 'header') {\n      newQuestions[index].header = newValue;\n    } else if (field === 'multiple_choice') {\n      console.log(newValue);\n      console.log(index);\n      newQuestions[index].choices = newValue;\n    }\n\n    setQuestions(newQuestions);\n    console.log(newQuestions);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"EditQuestions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"80%\",\n        margin: \"auto\",\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addQuestion,\n        style: {\n          background: \"transparent\",\n          border: \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-icons\",\n          children: \"add_circle_outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), questions ? questions.filter(question => question.status !== 'DELETED').map((question, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"question-wrapper\",\n      style: {\n        listStyle: \"none\",\n        padding: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Question, {\n        editMode: true,\n        readOnly: false,\n        type: question.type,\n        header: question.header,\n        choices: question.choices,\n        mdate: question.mdate,\n        nanoid: question.nanoid,\n        questions: questions,\n        setQuestions: setQuestions,\n        responses: props.responses.filter(res => res.question === question._id),\n        deleteQuestion: deleteQuestion,\n        updateQuestion: updateQuestion,\n        index: i\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 25\n    }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SubmitButton\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EditQuestions, \"bSfVyT+6uUGElZuuuGvq5lKZaho=\");\n\n_c = EditQuestions;\nexport default EditQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditQuestions\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/EditQuestions.js"],"names":["React","useState","useEffect","Question","nanoid","sortByDate","createQuestionAPIMethod","deleteQuestionByIdAPIMethod","getQuestionsAPIMethod","updateQuestionAPIMethod","deleteResponseByIdAPIMethod","getResponsesAPIMethod","EditQuestions","props","dbQuestions","setDBQuestions","questions","setQuestions","responses","setResponses","then","handleSubmit","console","log","i","length","status","j","_id","undefined","k","question","newQuestion","type","header","choices","mdate","creator","newQuestions","filter","addQuestion","id","Date","push","deleteQuestion","updateQuestion","newValue","field","index","width","margin","display","justifyContent","background","border","map","listStyle","padding","res"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Question from \"./Question\";\nimport {nanoid} from 'nanoid'\nimport {sortByDate} from \"../utils/HelperFunctions\";\nimport {\n    createQuestionAPIMethod,\n    deleteQuestionByIdAPIMethod,\n    getQuestionsAPIMethod,\n    updateQuestionAPIMethod,\n    deleteResponseByIdAPIMethod, getResponsesAPIMethod\n} from \"../api/client\";\n\nfunction EditQuestions(props){\n    const [dbQuestions, setDBQuestions] = useState([]);\n    const [questions, setQuestions] = useState(props.questions);\n    const [responses, setResponses] = useState(props.responses);\n\n    useEffect(() => {\n        getQuestionsAPIMethod().then((questions) => {\n            setDBQuestions(questions);\n            setQuestions(questions);\n        });\n        getResponsesAPIMethod().then((responses) => {\n            setResponses(responses);\n        });\n    }, []);\n\n    const handleSubmit = () => {\n        console.log(\"DB questions: \");\n        console.log(dbQuestions);\n        console.log(\"local questions: \");\n        console.log(questions);\n\n        for (let i = 0; i < questions.length; i++) {\n            if (questions[i].status === 'ADDED') {\n                console.log(\"ADDED\");\n                questions[i].status = '';\n                createQuestionAPIMethod(questions[i]);\n            }\n            for (let j = 0; j < dbQuestions.length; j++) {\n                if (dbQuestions[j].nanoid === questions[i].nanoid) {\n                    if (questions[i].status === 'DELETED' && dbQuestions[j]._id !== undefined) {\n                        console.log(\"DELETED\");\n                        deleteQuestionByIdAPIMethod(dbQuestions[j]._id);\n                        for (let k = 0; k < responses.length; k++) {\n                            if (responses[k].question === dbQuestions[j]._id) {\n                                console.log(\"res deleted@@@@@\");\n                                deleteResponseByIdAPIMethod(responses[k]._id);\n                            }\n                        }\n                    }\n                    else {\n                        console.log(\"UPDATED\");\n                        let newQuestion = {\n                            _id: questions[i]._id,\n                            type: questions[i].type,\n                            header: questions[i].header,\n                            choices: questions[i].choices,\n                            mdate: questions[i].mdate,\n                            nanoid: questions[i].nanoid,\n                            creator: questions[i].creator\n                        }\n                        updateQuestionAPIMethod(newQuestion);\n                    }\n                }\n            }\n        }\n        let newQuestions = questions.filter((question) => question.status !== 'DELETED');\n        props.setQuestions(sortByDate(newQuestions));\n        console.log(\"submit completed\");\n        console.log(newQuestions);\n    }\n\n    const addQuestion = () => {\n        let id = nanoid();\n        let newQuestion = {\n            type: 'Text',\n            header: '',\n            choices: [],\n            mdate: new Date(),\n            nanoid: id,\n            status: 'ADDED'\n        }\n        let newQuestions = [];\n        for (let i = 0; i < questions.length; i++) {\n            newQuestions.push(questions[i]);\n        }\n        newQuestions.push(newQuestion);\n        setQuestions(newQuestions);\n        console.log(\"question added - edit questions page\");\n        console.log(newQuestions);\n    }\n\n    const deleteQuestion = (nanoid) => {\n        let newQuestions = [];\n        for (let i = 0; i < questions.length; i++) {\n            newQuestions.push(questions[i]);\n            if (questions[i].nanoid === nanoid) {\n                questions[i].status = 'DELETED';\n                newQuestions.push(questions[i]);\n            }\n        }\n        setQuestions(newQuestions);\n        console.log(\"question deleted - edit questions page\");\n        console.log(newQuestions);\n    }\n\n    const updateQuestion = (newValue, field, index) => {\n        let newQuestions = [];\n        console.log(questions);\n        for (let i = 0; i < questions.length; i++) {\n            newQuestions.push(questions[i]);\n        }\n        if (field === 'type') {\n            newQuestions[index].type = newValue;\n        }\n        else if (field === 'header') {\n            newQuestions[index].header = newValue;\n        }\n        else if (field === 'multiple_choice') {\n            console.log(newValue);\n            console.log(index);\n            newQuestions[index].choices = newValue;\n        }\n        setQuestions(newQuestions);\n        console.log(newQuestions);\n    }\n\n    return (\n        <div className=\"EditQuestions\">\n            <div style={{width: \"80%\",margin: \"auto\",display: \"flex\", justifyContent: \"space-between\"}}>\n                <h3>Edit Questions</h3>\n                <button onClick={addQuestion} style={{background: \"transparent\", border: \"none\"}}>\n                    <span  className=\"material-icons\">add_circle_outline</span>\n                </button>\n            </div>\n            {\n                questions ?\n                    questions.filter((question) => question.status !== 'DELETED').map((question, i) =>\n                        <li className=\"question-wrapper\" style={{listStyle: \"none\", padding: \"5px\"}}>\n                            <Question\n                                editMode={true}\n                                readOnly={false}\n                                type={question.type}\n                                header={question.header}\n                                choices={question.choices}\n                                mdate={question.mdate}\n                                nanoid={question.nanoid}\n                                questions={questions}\n                                setQuestions={setQuestions}\n                                responses={props.responses.filter((res) => res.question === question._id)}\n                                deleteQuestion={deleteQuestion}\n                                updateQuestion={updateQuestion}\n                                index={i}\n                            />\n                        </li>\n                    )\n                    : <></>\n            }\n            <div className=\"SubmitButton\">\n                <button onClick={handleSubmit}>Save</button>\n            </div>\n        </div>\n    );\n}\nexport default EditQuestions"]},"metadata":{},"sourceType":"module"}