{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/ViewByQuestion.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CartesianGrid, Line, LineChart, Tooltip, XAxis } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewByQuestion(props) {\n  _s();\n\n  const [responses, setResponses] = useState(props.responses);\n  const [questions, setQuestions] = useState(props.questions);\n  const [textQuestion, setTextQuestion] = useState();\n  const [textResponses, setTextResponses] = useState();\n  const [textResponsesIndex, setTextResponsesIndex] = useState(0);\n  const [numberQuestion, setNumberQuesion] = useState();\n  const [numberResponses, setNumberResponses] = useState();\n  useEffect(() => {\n    setQuestions(props.questions);\n    setResponses(props.responses);\n\n    if (props.questions) {\n      setTextQuestion(filterOnly(props.questions, \"textQuestion\"));\n    }\n\n    if (props.responses) {\n      setTextResponses(sortByDate(filterOnly(props.responses, \"textResponse\")));\n      setNumberResponses(sortByDate2(filterOnly(props.responses, \"numberResponse\")));\n    }\n  }, [props.responses, props.questions]); //최신날짜 = 0번째\n\n  const sortByDate = list => {\n    return list.sort((a, b) => new Date(b.date) - new Date(a.date));\n  }; //오래된거 = 0 번째\n\n\n  const sortByDate2 = list => {\n    return list.sort((a, b) => new Date(a.date) - new Date(b.date));\n  }; //text question 만 빼와서 담아줘보리기\n\n\n  const filterOnly = (list, prop) => {\n    if (prop === \"textResponse\") {\n      return list.filter(r => r.response.text !== \"\");\n    } else if (prop === \"textQuestion\") {\n      return list.filter(r => r.type === \"Text\");\n    } else if (prop === \"numberResponse\") {\n      return list.filter(r => r.response.number !== null);\n    }\n  }; // let sortedList;\n  //---------------for testing---------------------\n  // if(responses){\n  //     let sortedList = sortByDate(responses);\n  //     console.log(sortedList)\n  //     console.log(sortedList[textQuestionsIndex].date)\n  // }\n\n\n  const dateToString = date => {\n    return date.getFullYear() + \" / \" + (date.getMonth() + 1) + \" / \" + date.getDate();\n  };\n\n  const prev = () => {\n    if (textResponsesIndex < textResponses.length - 1) {\n      setTextResponsesIndex(textResponsesIndex + 1);\n    }\n  };\n\n  const next = () => {\n    if (textResponsesIndex > 0) {\n      setTextResponsesIndex(textResponsesIndex - 1);\n    }\n  };\n\n  console.log(responses); // console.log(textResponses)\n\n  console.log(questions); // console.log(textQuestion)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"View by Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TextQuestionData\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"LogSelectionBar\",\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-between\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: prev,\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"<\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: textResponses ? textResponses[textResponsesIndex].date : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: next,\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \">\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TextQuestionDataView\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: textQuestion ? textQuestion[0].header : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: textResponses ? textResponses[textResponsesIndex].response.text : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"NumberQuestionData\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 400,\n        height: 400 // data={data}\n        ,\n        margin: {\n          top: 5,\n          right: 20,\n          left: 10,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n          stroke: \"#f5f5f5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"uv\",\n          stroke: \"#ff7300\",\n          yAxisId: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"pv\",\n          stroke: \"#387908\",\n          yAxisId: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ViewByQuestion, \"60s9qxfkC5A75gbEgZbFxQ2I9ac=\");\n\n_c = ViewByQuestion;\nexport default ViewByQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewByQuestion\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/ViewByQuestion.js"],"names":["React","useState","useEffect","CartesianGrid","Line","LineChart","Tooltip","XAxis","ViewByQuestion","props","responses","setResponses","questions","setQuestions","textQuestion","setTextQuestion","textResponses","setTextResponses","textResponsesIndex","setTextResponsesIndex","numberQuestion","setNumberQuesion","numberResponses","setNumberResponses","filterOnly","sortByDate","sortByDate2","list","sort","a","b","Date","date","prop","filter","r","response","text","type","number","dateToString","getFullYear","getMonth","getDate","prev","length","next","console","log","display","justifyContent","header","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {CartesianGrid, Line, LineChart, Tooltip, XAxis} from \"recharts\";\nfunction ViewByQuestion(props){\n    const [responses, setResponses] = useState(props.responses);\n    const [questions, setQuestions] = useState(props.questions);\n\n    const [textQuestion, setTextQuestion] = useState();\n    const [textResponses, setTextResponses] = useState();\n    const [textResponsesIndex, setTextResponsesIndex] = useState(0);\n\n    const [numberQuestion, setNumberQuesion] = useState();\n    const [numberResponses, setNumberResponses] = useState();\n\n    useEffect(()=>{\n        setQuestions(props.questions);\n        setResponses(props.responses);\n        if(props.questions){\n            setTextQuestion(filterOnly(props.questions, \"textQuestion\"))\n        }\n        if(props.responses){\n            setTextResponses(sortByDate(filterOnly(props.responses, \"textResponse\")));\n            setNumberResponses(sortByDate2(filterOnly(props.responses, \"numberResponse\")));\n        }\n    },[props.responses, props.questions])\n\n    //최신날짜 = 0번째\n    const sortByDate = (list) => {\n        return list.sort((a, b) => new Date(b.date) - new Date(a.date));\n    }\n    //오래된거 = 0 번째\n    const sortByDate2 = (list) => {\n        return list.sort((a, b) => new Date(a.date) - new Date(b.date));\n    }\n    //text question 만 빼와서 담아줘보리기\n    const filterOnly = (list, prop) => {\n        if(prop === \"textResponse\"){\n            return list.filter(r=> r.response.text !== \"\");\n        }\n        else if(prop === \"textQuestion\"){\n            return list.filter(r=> r.type === \"Text\");\n        }\n        else if(prop === \"numberResponse\"){\n            return list.filter(r=> r.response.number !== null);\n        }\n    }\n\n\n    // let sortedList;\n    //---------------for testing---------------------\n    // if(responses){\n    //     let sortedList = sortByDate(responses);\n    //     console.log(sortedList)\n    //     console.log(sortedList[textQuestionsIndex].date)\n    // }\n\n    const dateToString = (date) => {\n        return date.getFullYear() + \" / \" + (date.getMonth() + 1) + \" / \" + date.getDate();\n    }\n    const prev = ()=>{\n        if(textResponsesIndex < textResponses.length-1){\n            setTextResponsesIndex(textResponsesIndex+1);\n        }\n    }\n    const next = ()=>{\n        if(textResponsesIndex>0){\n            setTextResponsesIndex(textResponsesIndex-1);\n        }\n    }\n\n    console.log(responses)\n    // console.log(textResponses)\n    console.log(questions)\n    // console.log(textQuestion)\n\n\n\n\n\n\n    return (\n      <div>\n          <h1>View by Question</h1>\n\n          {/*text questions*/}\n          <div className=\"TextQuestionData\">\n              <div className=\"LogSelectionBar\" style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                  <button onClick={prev}>\n                      <h2>{\"<\"}</h2>\n                  </button>\n                  <h2>\n                      {textResponses? textResponses[textResponsesIndex].date : \"\"}\n                  </h2>\n                  <button onClick={next}>\n                      <h2>{\">\"}</h2>\n                  </button>\n              </div>\n              <div className=\"TextQuestionDataView\">\n                  <h2>{textQuestion? textQuestion[0].header: \"\"}</h2>\n                  <p>{textResponses? textResponses[textResponsesIndex].response.text: \"\"}</p>\n              </div>\n          </div>\n\n\n          {/*Number Questions*/}\n          <div className=\"NumberQuestionData\">\n              <LineChart\n                  width={400}\n                  height={400}\n                  // data={data}\n                  margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\n              >\n                  <XAxis dataKey=\"name\" />\n                  <Tooltip />\n                  <CartesianGrid stroke=\"#f5f5f5\" />\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#ff7300\" yAxisId={0} />\n                  <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#387908\" yAxisId={1} />\n              </LineChart>\n          </div>\n\n\n      </div>\n    );\n}\nexport default ViewByQuestion"]},"metadata":{},"sourceType":"module"}