{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/LogDay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Question from \"./Question\";\nimport { getResponsesAPIMethod, createResponseAPIMethod, deleteResponseByIdAPIMethod, updateResponseAPIMethod } from \"../api/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction LogDay(props) {\n  _s();\n\n  const [questions, setQuestions] = useState(props.questions);\n  const [responses, setResponses] = useState(props.responses);\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    setQuestions(props.questions);\n    setResponses(props.responses);\n    setDate(date); //console.log(date);\n  }, [props, date]);\n\n  const dateToString = date => {\n    return date.getFullYear() + \" / \" + (date.getMonth() + 1) + \" / \" + date.getDate();\n  };\n\n  const next = () => {\n    let temp = new Date(date);\n    temp.setDate(temp.getDate() + 1);\n\n    if (temp - new Date() < 0) {\n      setDate(temp);\n    }\n  };\n\n  const prev = () => {\n    let temp = new Date(date);\n    temp.setDate(temp.getDate() - 1);\n    setDate(temp);\n  };\n\n  const handleSubmit = () => {\n    console.log(responses);\n    getResponsesAPIMethod().then(dbResponses => {\n      for (let i = 0; i < responses.length; i++) {\n        //console.log(responses[i].response);\n        //console.log(\"A: \" + responses[i].date);\n        //console.log(\"B: \" + date);\n        console.log(responses[i].date === date || responses[i].date.toString().split('T')[0] === date.toISOString().split('T')[0]);\n\n        if (true) {\n          if (responses[i].status === 'ADDED') {\n            if (responses[i].response.text === '' && responses[i].response.number === null && responses[i].response.boolean === null && responses[i].response.multiple_choice.length === 0) {\n              responses[i].status = 'DELETED'; // @\n\n              console.log(\"empty response\");\n            } else {\n              console.log(\"response added\");\n              responses[i].status = '';\n              createResponseAPIMethod(responses[i]);\n            }\n          }\n\n          for (let j = 0; j < dbResponses.length; j++) {\n            //console.log(\"A: \" + dbResponses[j].date);\n            //console.log(\"B: \" + responses[i].date);\n            //console.log(responses[i].nanoid);\n            //console.log(dbResponses[j].date === responses[i].date);\n            let dbDate = dateToString(new Date(dbResponses[j].date));\n            let localDate = dateToString(new Date(responses[i].date)); //console.log(dbDate);\n            //console.log(localDate);\n\n            let bool = dbDate === localDate; //console.log(\"bool: \" + bool);\n\n            if (dbResponses[j].question === responses[i].question && bool) {\n              if (responses[i].response.text === '' && responses[i].response.number === null && responses[i].response.boolean === null && responses[i].response.multiple_choice.length === 0) {\n                responses[i].status = 'DELETED'; // @\n                //console.log(responses);\n\n                console.log(\"empty response 2\");\n                deleteResponseByIdAPIMethod(dbResponses[j]._id);\n              } else {\n                console.log(\"response updated\"); //console.log(responses[i].response);\n\n                let newResponse = {\n                  _id: dbResponses[j]._id,\n                  response: responses[i].response,\n                  date: dbResponses[j].date,\n                  nanoid: responses[i].nanoid,\n                  question: responses[i].question,\n                  creator: responses[i].creator\n                }; //console.log(newResponse);\n\n                updateResponseAPIMethod(newResponse);\n              }\n            }\n          }\n        }\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LogSelectionBar\",\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prev,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: dateToString(date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: next,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), questions ? questions.filter(question => question.status !== 'DELETED').map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"question-wrapper\",\n      style: {\n        listStyle: \"none\",\n        padding: \"5px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Question, {\n        editMode: false,\n        type: question.type,\n        header: question.header,\n        choices: question.choices,\n        mdate: question.mdate,\n        nanoid: question.nanoid,\n        questions: questions,\n        setQuestions: setQuestions,\n        responses: responses,\n        questionId: question._id,\n        setResponses: setResponses,\n        date: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SubmitButton\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LogDay, \"h1EDudAi8KqZeZuMm1PG6NzwIAo=\");\n\n_c = LogDay;\nexport default LogDay;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogDay\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/LogDay.js"],"names":["React","useState","useEffect","Question","getResponsesAPIMethod","createResponseAPIMethod","deleteResponseByIdAPIMethod","updateResponseAPIMethod","LogDay","props","questions","setQuestions","responses","setResponses","date","setDate","Date","dateToString","getFullYear","getMonth","getDate","next","temp","prev","handleSubmit","console","log","then","dbResponses","i","length","toString","split","toISOString","status","response","text","number","boolean","multiple_choice","j","dbDate","localDate","bool","question","_id","newResponse","nanoid","creator","display","justifyContent","filter","map","listStyle","padding","type","header","choices","mdate"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Question from \"./Question\";\nimport {\n    getResponsesAPIMethod,\n    createResponseAPIMethod,\n    deleteResponseByIdAPIMethod,\n    updateResponseAPIMethod\n} from \"../api/client\";\n\nfunction LogDay(props) {\n    const [questions, setQuestions] = useState(props.questions);\n    const [responses, setResponses] = useState(props.responses);\n    const [date, setDate] = useState(new Date());\n\n    useEffect(() => {\n        setQuestions(props.questions);\n        setResponses(props.responses);\n        setDate(date);\n        //console.log(date);\n    }, [props, date]);\n\n    const dateToString = (date) => {\n        return date.getFullYear() + \" / \" + (date.getMonth() + 1) + \" / \" + date.getDate();\n    }\n\n    const next = () => {\n        let temp = new Date(date);\n        temp.setDate(temp.getDate() + 1);\n        if (temp - new Date() < 0) {\n            setDate(temp);\n        }\n    }\n\n    const prev = () => {\n        let temp = new Date(date);\n        temp.setDate(temp.getDate() - 1);\n        setDate(temp);\n    }\n\n    const handleSubmit = () => {\n        console.log(responses);\n        getResponsesAPIMethod().then((dbResponses) => {\n            for (let i = 0; i < responses.length; i++) {\n                //console.log(responses[i].response);\n                //console.log(\"A: \" + responses[i].date);\n                //console.log(\"B: \" + date);\n                console.log(responses[i].date === date || responses[i].date.toString().split('T')[0] === date.toISOString().split('T')[0]);\n                if (true) {\n                    if (responses[i].status === 'ADDED') {\n                        if (responses[i].response.text === '' && responses[i].response.number === null && responses[i].response.boolean === null && responses[i].response.multiple_choice.length === 0) {\n                            responses[i].status = 'DELETED'; // @\n                            console.log(\"empty response\");\n                        } else {\n                            console.log(\"response added\");\n                            responses[i].status = '';\n                            createResponseAPIMethod(responses[i]);\n                        }\n                    }\n                    for (let j = 0; j < dbResponses.length; j++) {\n                        //console.log(\"A: \" + dbResponses[j].date);\n                        //console.log(\"B: \" + responses[i].date);\n                        //console.log(responses[i].nanoid);\n                        //console.log(dbResponses[j].date === responses[i].date);\n\n\n                        let dbDate = dateToString(new Date(dbResponses[j].date));\n                        let localDate = dateToString(new Date(responses[i].date));\n                        //console.log(dbDate);\n                        //console.log(localDate);\n\n                        let bool = dbDate === localDate;\n                        //console.log(\"bool: \" + bool);\n\n                        if (dbResponses[j].question === responses[i].question && bool) {\n\n                            if (responses[i].response.text === '' && responses[i].response.number === null && responses[i].response.boolean === null && responses[i].response.multiple_choice.length === 0) {\n                                responses[i].status = 'DELETED'; // @\n                                //console.log(responses);\n                                console.log(\"empty response 2\");\n                                deleteResponseByIdAPIMethod(dbResponses[j]._id);\n                            }\n                            else {\n                                console.log(\"response updated\");\n                                //console.log(responses[i].response);\n                                let newResponse = {\n                                    _id: dbResponses[j]._id,\n                                    response: responses[i].response,\n                                    date: dbResponses[j].date,\n                                    nanoid: responses[i].nanoid,\n                                    question: responses[i].question,\n                                    creator: responses[i].creator\n                                }\n                                //console.log(newResponse);\n                                updateResponseAPIMethod(newResponse);\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    return (\n        <div>\n            <div className=\"LogSelectionBar\" style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                <button onClick={prev}>\n                    <h2>{\"<\"}</h2>\n                </button>\n                <h2>\n                    {dateToString(date)}\n                </h2>\n                <button onClick={next}>\n                    <h2>{\">\"}</h2>\n                </button>\n            </div>\n            {\n                questions ?\n                    questions.filter((question) => question.status !== 'DELETED').map((question) =>\n                        <li className=\"question-wrapper\" style={{listStyle: \"none\", padding: \"5px\"}}>\n                            <Question\n                                editMode={false}\n                                type={question.type}\n                                header={question.header}\n                                choices={question.choices}\n                                mdate={question.mdate}\n                                nanoid={question.nanoid}\n                                questions={questions}\n                                setQuestions={setQuestions}\n                                responses={responses}\n                                questionId={question._id}\n                                setResponses={setResponses}\n                                date={date}\n                            />\n                        </li>\n                    )\n                    : <></>\n            }\n            <div className=\"SubmitButton\" >\n                <button onClick={handleSubmit}>Submit</button>\n            </div>\n        </div>\n    );\n}\nexport default LogDay"]},"metadata":{},"sourceType":"module"}