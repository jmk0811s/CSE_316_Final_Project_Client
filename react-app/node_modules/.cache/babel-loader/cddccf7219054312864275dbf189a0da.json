{"ast":null,"code":"var _jsxFileName = \"/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Daylog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Question from \"./Question\";\nimport { getCurrentUserAPIMethod, getDaylogsAPIMethod, getQuestionsByDaylogIdAPIMethod } from \"../api/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Daylog(props) {\n  _s();\n\n  const [daylogs, setDaylogs] = useState(props.daylogs);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [questionSets, setQuestionSets] = useState([]);\n  useEffect(() => {\n    setDaylogs(props.daylogs);\n    getQuestionsByDaylogIdAPIMethod(sortedLogDaysByDates[currentIndex]._id).then(questions => {\n      console.log(questions);\n      setQuestionSets(questionSets);\n    });\n  }, [props]);\n  let selectedDate;\n  let sortedLogDaysByDates;\n\n  if (daylogs.length != 0) {\n    sortedLogDaysByDates = daylogs.slice().sort((a, b) => b.date - a.date);\n    selectedDate = sortedLogDaysByDates[currentIndex].date;\n    console.log(sortedLogDaysByDates[currentIndex]._id);\n  }\n\n  let date2String = d => {\n    var dt = new Date(d);\n    var dtm = dt.getMonth();\n    var dtD = dt.getDay();\n    var dty = dt.getFullYear();\n    return dtm + \"/\" + dtD + \"/\" + dty;\n  }; // console.log(qSets)\n\n\n  return selectedDate ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LogSelectionBar\",\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: date2String(selectedDate)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: questionSets ? questionSets.map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          listStyle: \"none\",\n          padding: \"5px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Question, {\n          qText: question.header,\n          qType: question.type,\n          qDate: date2String(selectedDate),\n          qChoices: question.answer.multiple_choice,\n          editMode: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SubmitButton\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 17\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(Daylog, \"VqJDx4OtoGapMV3x5olL47D30F8=\");\n\n_c = Daylog;\nexport default Daylog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Daylog\");","map":{"version":3,"sources":["/Users/guenuk/Documents/GitHub/CSE_316_Final_Project_Client/react-app/src/components/Daylog.js"],"names":["React","useEffect","useState","Question","getCurrentUserAPIMethod","getDaylogsAPIMethod","getQuestionsByDaylogIdAPIMethod","Daylog","props","daylogs","setDaylogs","currentIndex","setCurrentIndex","questionSets","setQuestionSets","sortedLogDaysByDates","_id","then","questions","console","log","selectedDate","length","slice","sort","a","b","date","date2String","d","dt","Date","dtm","getMonth","dtD","getDay","dty","getFullYear","display","justifyContent","map","question","listStyle","padding","header","type","answer","multiple_choice"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport Question from \"./Question\";\nimport {getCurrentUserAPIMethod, getDaylogsAPIMethod, getQuestionsByDaylogIdAPIMethod} from \"../api/client\";\n\nfunction Daylog(props){\n    const [daylogs, setDaylogs] = useState(props.daylogs);\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [questionSets, setQuestionSets] = useState([]);\n\n    useEffect(() => {\n        setDaylogs(props.daylogs);\n        getQuestionsByDaylogIdAPIMethod(sortedLogDaysByDates[currentIndex]._id).then((questions)=>{\n            console.log(questions)\n            setQuestionSets(questionSets)\n        })\n    }, [props]);\n\n    let selectedDate;\n    let sortedLogDaysByDates;\n\n    if(daylogs.length != 0){\n        sortedLogDaysByDates = daylogs.slice().sort((a,b) => b.date - a.date);\n        selectedDate = sortedLogDaysByDates[currentIndex].date\n        console.log(sortedLogDaysByDates[currentIndex]._id);\n\n\n    }\n\n    let date2String = (d) => {\n        var dt = new Date(d);\n        var dtm = dt.getMonth();\n        var dtD = dt.getDay();\n        var dty = dt.getFullYear();\n        return dtm +\"/\"+ dtD+ \"/\" + dty\n    }\n\n    // console.log(qSets)\n\n    return (selectedDate? (\n                <div>\n                    <div className=\"LogSelectionBar\" style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                        <button>\n                            <h2>{\"<\"}</h2>\n                        </button>\n                        <h2>\n                            {date2String(selectedDate)}\n                        </h2>\n\n                        <button>\n                            <h2>{\">\"}</h2>\n                        </button>\n                    </div>\n                    <div>\n                        {questionSets?(questionSets.map((question)=>\n                            <li style={{listStyle: \"none\",padding: \"5px\"}}>\n                                <Question qText = {question.header}\n                                          qType = {question.type}\n                                          qDate = {date2String(selectedDate)}\n                                          qChoices = {question.answer.multiple_choice}\n                                          editMode = {false}\n                                />\n                            </li>\n                        )):<></>}\n                    </div>\n                    <div className=\"SubmitButton\" >\n                        <button>Submit</button>\n                    </div>\n\n\n                </div>):\n                <></>\n\n    );\n}\nexport default Daylog\n"]},"metadata":{},"sourceType":"module"}